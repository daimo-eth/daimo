import {
  NATIVE_ASSET,
  ORACLE_ADDRESS,
  calculateERC20PaymasterAddress,
} from "@pimlico/erc20-paymaster";
import * as fs from "fs";
import { Constants } from "userop";
import { createPublicClient, http } from "viem";
import { baseGoerli } from "viem/chains";

import * as Contracts from "../src/generated";

const abi = Contracts.erc20ABI;

// This one spot is the only place where Daimo's stablecoin is hardcoded.
// Everything else is generated from the contract.

// Base Goerli testUSDC
const address = "0x1B85deDe8178E18CdE599B4C9d913534553C3dBf";

async function main() {
  const publicClient = createPublicClient({
    chain: baseGoerli,
    transport: http(),
  });

  console.log("✔ Fetching erc20 metadata");
  const tokenDecimals = await publicClient.readContract({
    abi,
    address,
    functionName: "decimals",
  });
  const tokenSymbol = await publicClient.readContract({
    abi,
    address,
    functionName: "symbol",
  });
  const tokenName = await publicClient.readContract({
    abi,
    address,
    functionName: "name",
  });
  const chainId = baseGoerli.id;

  // Rather than call Pimlico SDK's getERC20Paymaster which makes
  // network requests and needs a ethers provider, we just hardcode
  // the create2 address computation call here for efficiency.
  const oracleAddress = ORACLE_ADDRESS[chainId]["USDC"];
  const nativeAssetOracle = ORACLE_ADDRESS[chainId][NATIVE_ASSET[chainId]];

  const paymasterAddress = await calculateERC20PaymasterAddress({
    tokenAddress: address,
    entrypoint: Constants.ERC4337.EntryPoint,
    tokenOracle: oracleAddress,
    nativeAssetOracle,
    owner: "0x4337000c2828f5260d8921fd25829f606b9e8680", // pimlico address
  });

  const pimlicoPaymasterAbi = [
    "function priceMarkup() view returns (uint32)",
    "function previousPrice() view returns (uint192)",
  ];

  console.log("✔ Computed erc20 Pimlico paymaster address");

  const fileStr = `// Generated by script/fetchTokenMetadata.ts

export const tokenMetadata = {
  address: "${address}",
  decimals: ${tokenDecimals},
  symbol: "${tokenSymbol}",
  name: "${tokenName}",
  chainId: ${chainId},
  paymasterAddress: "${paymasterAddress}",
  pimlicoPaymasterAbi: ${JSON.stringify(pimlicoPaymasterAbi)},
} as const;
`;

  console.log("✔ Writing to src/tokenMetadata.ts");
  fs.writeFileSync("./src/tokenMetadata.ts", fileStr);
}

main();
