make clean
rm -rf out lib
make build
forge install
Updating dependencies in /Users/andrew/work/daimo-internal/daimo/packages/contract/lib
forge build
Compiling 169 files with Solc 0.8.26
Solc 0.8.26 finished in 942.26ms
Error: 
Compiler run failed:
Error (6243): The "tload" instruction is only available for Cancun-compatible VMs (you are currently compiling for "london").
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:237:22:
    |
237 |             value := tload(slot)
    |                      ^^^^^

Error (8678): Variable count for assignment to "value" does not match number of values (1 vs. 0)
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:237:13:
    |
237 |             value := tload(slot)
    |             ^^^^^^^^^^^^^^^^^^^^

Error (6243): The "tstore" instruction is only available for Cancun-compatible VMs (you are currently compiling for "london").
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:247:13:
    |
247 |             tstore(slot, value)
    |             ^^^^^^

Error (6243): The "tload" instruction is only available for Cancun-compatible VMs (you are currently compiling for "london").
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:257:22:
    |
257 |             value := tload(slot)
    |                      ^^^^^

Error (8678): Variable count for assignment to "value" does not match number of values (1 vs. 0)
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:257:13:
    |
257 |             value := tload(slot)
    |             ^^^^^^^^^^^^^^^^^^^^

Error (6243): The "tstore" instruction is only available for Cancun-compatible VMs (you are currently compiling for "london").
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:267:13:
    |
267 |             tstore(slot, value)
    |             ^^^^^^

Error (6243): The "tload" instruction is only available for Cancun-compatible VMs (you are currently compiling for "london").
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:277:22:
    |
277 |             value := tload(slot)
    |                      ^^^^^

Error (8678): Variable count for assignment to "value" does not match number of values (1 vs. 0)
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:277:13:
    |
277 |             value := tload(slot)
    |             ^^^^^^^^^^^^^^^^^^^^

Error (6243): The "tstore" instruction is only available for Cancun-compatible VMs (you are currently compiling for "london").
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:287:13:
    |
287 |             tstore(slot, value)
    |             ^^^^^^

Error (6243): The "tload" instruction is only available for Cancun-compatible VMs (you are currently compiling for "london").
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:297:22:
    |
297 |             value := tload(slot)
    |                      ^^^^^

Error (8678): Variable count for assignment to "value" does not match number of values (1 vs. 0)
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:297:13:
    |
297 |             value := tload(slot)
    |             ^^^^^^^^^^^^^^^^^^^^

Error (6243): The "tstore" instruction is only available for Cancun-compatible VMs (you are currently compiling for "london").
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:307:13:
    |
307 |             tstore(slot, value)
    |             ^^^^^^

Error (6243): The "tload" instruction is only available for Cancun-compatible VMs (you are currently compiling for "london").
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:317:22:
    |
317 |             value := tload(slot)
    |                      ^^^^^

Error (8678): Variable count for assignment to "value" does not match number of values (1 vs. 0)
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:317:13:
    |
317 |             value := tload(slot)
    |             ^^^^^^^^^^^^^^^^^^^^

Error (6243): The "tstore" instruction is only available for Cancun-compatible VMs (you are currently compiling for "london").
   --> lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol:327:13:
    |
327 |             tstore(slot, value)
    |             ^^^^^^

Warning (5159): "selfdestruct" has been deprecated. Note that, starting from the Cancun hard fork, the underlying opcode no longer deletes the code and data associated with an account and only transfers its Ether to the beneficiary, unless executed in the same transaction in which the contract was created (see EIP-6780). Any use in newly deployed contracts is strongly discouraged even if the new behavior is taken into account. Future changes to the EVM might further reduce the functionality of the opcode.
   --> src/DaimoFastCCTP.sol:315:9:
    |
315 |         selfdestruct(_creator);
    |         ^^^^^^^^^^^^

Warning (5159): "selfdestruct" has been deprecated. Note that, starting from the Cancun hard fork, the underlying opcode no longer deletes the code and data associated with an account and only transfers its Ether to the beneficiary, unless executed in the same transaction in which the contract was created (see EIP-6780). Any use in newly deployed contracts is strongly discouraged even if the new behavior is taken into account. Future changes to the EVM might further reduce the functionality of the opcode.
   --> src/pay/PayIntent.sol:113:9:
    |
113 |         selfdestruct(intent.escrow);
    |         ^^^^^^^^^^^^

Warning (5159): "selfdestruct" has been deprecated. Note that, starting from the Cancun hard fork, the underlying opcode no longer deletes the code and data associated with an account and only transfers its Ether to the beneficiary, unless executed in the same transaction in which the contract was created (see EIP-6780). Any use in newly deployed contracts is strongly discouraged even if the new behavior is taken into account. Future changes to the EVM might further reduce the functionality of the opcode.
   --> src/pay/PayIntent.sol:142:9:
    |
142 |         selfdestruct(intent.escrow);
    |         ^^^^^^^^^^^^

make[1]: *** [build] Error 1
make: *** [full] Error 2
