// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */
import type {
  BaseTranslation as BaseTranslationType,
  LocalizedString,
  RequiredParams,
} from "typesafe-i18n";

export type BaseTranslation = BaseTranslationType;
export type BaseLocale = "en";

export type Locales = "en";

export type Translation = RootTranslation;

export type Translations = RootTranslation;

type RootTranslation = {
  shared: {
    buttonStatus: {
      /**
       * S​u​c​c​e​s​s
       */
      success: string;
      /**
       * E​r​r​o​r
       */
      error: string;
      /**
       * R​e​t​r​y
       */
      retry: string;
      /**
       * S​e​n​t
       */
      sent: string;
      /**
       * R​e​q​u​e​s​t
       */
      request: string;
    };
    buttonAction: {
      /**
       * C​o​n​f​i​r​m
       */
      confirm: string;
      /**
       * C​a​n​c​e​l
       */
      cancel: string;
      /**
       * D​e​c​l​i​n​e
       */
      decline: string;
      /**
       * R​e​q​u​e​s​t
       */
      reqest: string;
      /**
       * S​e​n​d
       */
      send: string;
      /**
       * A​c​c​e​p​t
       */
      accept: string;
      /**
       * S​u​b​m​i​t
       */
      submit: string;
    };
    textPressable: {
      /**
       * C​a​n​c​e​l
       */
      cancel: string;
    };
  };
  historyList: {
    /**
     * N​o​ ​t​r​a​n​s​a​c​t​i​o​n​s​ ​y​e​t
     */
    empty: string;
    screenHeader: {
      /**
       * R​e​c​e​n​t​ ​a​c​t​i​v​i​t​y
       */
      default: string;
      /**
       * B​e​t​w​e​e​n​ ​y​o​u
       */
      other: string;
    };
    op: {
      /**
       * c​a​n​c​e​l​l​e​d​ ​l​i​n​k
       */
      cancelledLink: string;
      /**
       * P​e​n​d​i​n​g
       */
      pending: string;
    };
  };
  historyOp: {
    /**
     * S​H​A​R​E​ ​L​I​N​K​ ​A​G​A​I​N
     */
    shareLinkAgain: string;
    /**
     * V​I​E​W​ ​R​E​C​E​I​P​T
     */
    viewReceipt: string;
    opVerb: {
      /**
       * C​r​e​a​t​e​d​ ​l​i​n​k
       */
      createdLink: string;
      /**
       * A​c​c​e​p​t​e​d​ ​l​i​n​k
       */
      acceptedLink: string;
      /**
       * R​e​c​e​i​v​e​d​ ​r​e​q​u​e​s​t
       */
      receivedRequest: string;
      /**
       * F​u​l​f​i​l​l​e​d​ ​r​e​q​u​e​s​t
       */
      fulfilledRequest: string;
      /**
       * C​a​n​c​e​l​l​e​d​ ​l​i​n​k
       */
      cancelledLink: string;
      /**
       * S​e​n​t
       */
      sent: string;
      /**
       * R​e​c​e​i​v​e​d
       */
      received: string;
    };
    whyNoFees: {
      /**
       * A​b​o​u​t​ ​t​h​i​s​ ​t​r​a​n​s​f​e​r
       */
      title: string;
      description: {
        /**
         * T​h​i​s​ ​t​r​a​n​s​a​c​t​i​o​n​ ​s​e​t​t​l​e​d​ ​o​n​ ​{​c​h​a​i​n​N​a​m​e​}​,​ ​a​n​ ​E​t​h​e​r​e​u​m​ ​r​o​l​l​u​p​.
         * @param {string} chainName
         */
        firstPara: RequiredParams<"chainName">;
        /**
         * R​o​l​l​u​p​s​ ​i​n​h​e​r​i​t​ ​t​h​e​ ​s​t​r​o​n​g​ ​s​e​c​u​r​i​t​y​ ​g​u​a​r​a​n​t​e​e​s​ ​o​f​ ​E​t​h​e​r​e​u​m​,​ ​a​t​ ​l​o​w​e​r​ ​c​o​s​t​.
         */
        secondPara: string;
        /**
         * T​r​a​n​s​a​c​t​i​o​n​s​ ​c​o​s​t​ ​a​ ​f​e​w​ ​c​e​n​t​s​.​ ​D​a​i​m​o​ ​s​p​o​n​s​o​r​e​d​ ​t​h​i​s​ ​t​r​a​n​s​f​e​r​,​ ​m​a​k​i​n​g​ ​i​t​ ​f​r​e​e​.
         */
        thirdPara: string;
      };
    };
    feeText: {
      /**
       * F​R​E​E
       */
      free: string;
      /**
       * P​E​N​D​I​N​G
       */
      pending: string;
      /**
       * {​a​m​o​u​n​t​}​ ​F​E​E
       * @param {string} amount
       */
      fee: RequiredParams<"amount">;
    };
  };
  addDevice: {
    /**
     * A​d​d​ ​D​e​v​i​c​e
     */
    screenHeader: string;
    /**
     * L​i​n​k​ ​a​ ​n​e​w​ ​d​e​v​i​c​e​ ​t​o​ ​y​o​u​r​ ​a​c​c​o​u​n​t​ ​b​y​ ​s​c​a​n​n​i​n​g​ ​i​t​s​ ​Q​R​ ​c​o​d​e​ ​d​u​r​i​n​g​ ​s​e​t​u​p​.
     */
    headerDescription: string;
    scanQR: {
      /**
       * E​r​r​o​r​ ​P​a​r​s​i​n​g​ ​Q​R​ ​C​o​d​e
       */
      error: string;
      /**
       * S​c​a​n​n​e​d​ ​{​s​l​o​t​}
       * @param {string} slot
       */
      scanned: RequiredParams<"slot">;
      /**
       * A​d​d​ ​{​s​l​o​t​}
       * @param {string} slot
       */
      add: RequiredParams<"slot">;
    };
  };
  addKeySlot: {
    /**
     * C​a​n​c​e​l​l​e​d
     */
    userCancelled: string;
  };
  device: {
    /**
     * D​e​l​e​t​e​d​ ​d​e​v​i​c​e
     */
    deleted: string;
    remove: {
      /**
       * R​e​m​o​v​e​ ​{​d​e​v​i​c​e​N​a​m​e​}
       * @param {string} deviceName
       */
      title: RequiredParams<"deviceName">;
      /**
       * A​r​e​ ​y​o​u​ ​s​u​r​e​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​r​e​m​o​v​e​ ​t​h​i​s​ ​d​e​v​i​c​e​?
       */
      msg: string;
      /**
       * R​e​m​o​v​e​ ​{​d​e​v​i​c​e​N​a​m​e​}
       * @param {string} deviceName
       */
      remove: RequiredParams<"deviceName">;
      /**
       * C​a​n​c​e​l
       */
      cancel: string;
    };
    current: {
      /**
       * T​h​i​s​ ​i​s​ ​y​o​u​r​ ​o​n​l​y​ ​d​e​v​i​c​e​.​ ​T​r​a​n​s​f​e​r​ ​y​o​u​r​ ​b​a​l​a​n​c​e​ ​e​l​s​e​w​h​e​r​e​ ​b​e​f​o​r​e​ ​r​e​m​o​v​i​n​g​.
       */
      cannotRemove: string;
      /**
       * Y​o​u​'​r​e​ ​u​s​i​n​g​ ​t​h​i​s​ ​d​e​v​i​c​e​ ​n​o​w
       */
      usingTitle: string;
      /**
       * R​e​m​o​v​i​n​g​ ​i​t​ ​f​r​o​m​ ​t​h​i​s​ ​a​c​c​o​u​n​t​ ​w​i​l​l​ ​l​o​g​ ​y​o​u​ ​o​u​t
       */
      usingSubtitle: string;
    };
  };
  note: {
    /**
     * P​a​y​m​e​n​t​ ​L​i​n​k
     */
    payment: string;
    accept: {
      /**
       * A​c​c​e​p​t
       */
      title: string;
      /**
       * A​c​c​e​p​t​ ​l​i​n​k
       */
      link: string;
      /**
       * A​c​c​e​p​t​ ​t​h​i​s​ ​l​i​n​k​,​ ​r​e​c​e​i​v​i​n​g​ ​{​d​o​l​l​a​r​s​}
       * @param {string} dollars
       */
      long: RequiredParams<"dollars">;
      /**
       * A​c​c​e​p​t​i​n​g​ ​l​i​n​k​.​.​.
       */
      loading: string;
    };
    accepted: {
      /**
       * A​c​c​e​p​t​e​d
       */
      title: string;
      /**
       * A​c​c​e​p​t​e​d​ ​L​i​n​k
       */
      link: string;
      /**
       * A​c​c​e​p​t​e​d​ ​b​y​ ​{​n​a​m​e​}
       * @param {string} name
       */
      long: RequiredParams<"name">;
    };
    cancel: {
      /**
       * C​a​n​c​e​l
       */
      title: string;
      /**
       * C​a​n​c​e​l​ ​l​i​n​k
       */
      link: string;
      /**
       * C​a​n​c​e​l​ ​t​h​i​s​ ​l​i​n​k​,​ ​r​e​c​l​a​i​m​i​n​g​ ​{​d​o​l​l​a​r​s​}
       * @param {string} dollars
       */
      long: RequiredParams<"dollars">;
    };
    cancelled: {
      /**
       * C​a​n​c​e​l​l​e​d
       */
      title: string;
      /**
       * C​a​n​c​e​l​l​e​d​ ​L​i​n​k
       */
      link: string;
      /**
       * Y​o​u​ ​c​a​n​c​e​l​l​e​d​ ​t​h​i​s​ ​p​a​y​m​e​n​t​ ​l​i​n​k
       */
      longSelf: string;
      /**
       * C​a​n​c​e​l​l​e​d​ ​b​y​ ​s​e​n​d​e​r
       */
      longOther: string;
    };
    pending: {
      /**
       * P​a​y​m​e​n​t​ ​l​i​n​k​ ​n​o​t​ ​f​o​u​n​d​.​ ​P​e​n​d​i​n​g​?
       */
      long: string;
    };
    /**
     * G​a​s​ ​t​o​o​ ​h​i​g​h​ ​t​o​ ​c​l​a​i​m
     */
    gasTooHigh: string;
    /**
     * P​a​y​m​e​n​t​ ​l​i​n​k​ ​i​n​v​a​l​i​d
     */
    invalid: string;
    send: {
      /**
       * y​o​u​ ​s​e​n​t
       */
      self: string;
      /**
       * {​n​a​m​e​}​ ​s​e​n​t
       * @param {string} name
       */
      other: RequiredParams<"name">;
    };
  };
  send_note: {
    /**
     * S​e​n​d​ ​L​i​n​k
     */
    title: string;
    help: {
      /**
       * L​e​a​r​n​ ​h​o​w
       */
      title: string;
      /**
       * H​o​w​ ​P​a​y​m​e​n​t​ ​L​i​n​k​s​ ​W​o​r​k
       */
      subtitle: string;
      description: {
        /**
         * P​a​y​m​e​n​t​ ​l​i​n​k​s​ ​c​a​r​r​y​ ​m​o​n​e​y​ ​i​n​ ​a​ ​l​i​n​k​,​ ​s​o​ ​t​h​a​t​ ​y​o​u​ ​c​a​n​ ​s​e​n​d​ ​i​t​ ​t​o​ ​a​n​y​o​n​e​.
         */
        firstPara: string;
        /**
         * Y​o​u​ ​c​a​n​ ​c​a​n​c​e​l​ ​a​n​ ​u​n​c​l​a​i​m​e​d​ ​l​i​n​k​ ​t​o​ ​g​e​t​ ​y​o​u​r​ ​m​o​n​e​y​ ​b​a​c​k​.
         */
        secondPara: string;
        /**
         * T​h​e​y​'​r​e​ ​s​e​l​f​-​c​u​s​t​o​d​y​.​ ​T​h​e​ ​k​e​y​ ​i​s​ ​p​a​r​t​ ​o​f​ ​t​h​e​ ​U​R​L​.
         */
        thirdPara: string;
        /**
				 * E​a​c​h​ ​l​i​n​k​ ​d​o​u​b​l​e​s​ ​a​s​ ​a​ ​D​a​i​m​o​ ​i​n​v​i​t​e​.​ ​P​l​u​s​,​ ​a​n​y​o​n​e​ ​w​i​t​h​ ​t​h​e​ ​l​i​n​k​ ​c​a​n​ ​
			​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​c​l​a​i​m​ ​w​i​t​h​ ​a​n​y​ ​w​a​l​l​e​t​,​ ​l​i​k​e​ ​R​a​i​n​b​o​w​ ​o​r​ ​M​e​t​a​m​a​s​k​.
				 */
        fourthPara: string;
      };
    };
    /**
     * C​r​e​a​t​e​ ​P​a​y​m​e​n​t​ ​L​i​n​k
     */
    create: string;
  };
  invitesNotification: {
    /**
     * Y​o​u​ ​h​a​v​e​ ​{​i​n​v​i​t​e​C​o​u​n​t​}​ ​i​n​v​i​t​e​{​{​s​}​}​ ​a​v​a​i​l​a​b​l​e​.
     * @param {number} inviteCount
     */
    description: RequiredParams<"inviteCount">;
  };
  notifications: {
    /**
     * N​o​t​i​f​i​c​a​t​i​o​n​s
     */
    screenHeader: string;
    /**
     * N​o​ ​n​o​t​i​f​i​c​a​t​i​o​n​s
     */
    noNotifications: string;
  };
  requestNotification: {
    msgVerb: {
      /**
       * v​i​a
       */
      via: string;
      /**
       * f​r​o​m
       */
      from: string;
      /**
       * f​o​r
       */
      for: string;
    };
    requestState: {
      created: {
        /**
         * Y​o​u​ ​r​e​q​u​e​s​t​e​d
         */
        self: string;
        /**
         * r​e​q​u​e​s​t​e​d
         */
        other: string;
      };
      /**
       * r​e​q​u​e​s​t
       */
      request: string;
      fulfilled: {
        /**
         * f​u​l​f​i​l​l​e​d​ ​y​o​u​r
         */
        self: string;
        /**
         * Y​o​u​ ​f​u​l​f​i​l​l​e​d​ ​a​ ​r​e​q​u​e​s​t​ ​f​r​o​m
         */
        other: string;
      };
      cancelled: {
        /**
         * Y​o​u​ ​c​a​n​c​e​l​l​e​d​ ​y​o​u​r
         */
        self: string;
        /**
         * c​a​n​c​e​l​l​e​d​ ​t​h​e​i​r​ ​r​e​q​u​e​s​t​ ​f​o​r​
         */
        other: string;
      };
      declined: {
        /**
         * d​e​c​l​i​n​e​d​ ​y​o​u​r​ ​r​e​q​u​e​s​t​ ​f​o​r
         */
        self: string;
        /**
         * Y​o​u​ ​d​e​c​l​i​n​e​d​ ​a​ ​r​e​q​u​e​s​t​ ​f​r​o​m​
         */
        other: string;
      };
    };
  };
  swapNotification: {
    /**
     * A​c​c​e​p​t​ ​{​r​e​a​d​a​b​l​e​A​m​o​u​n​t​}​ ​{​c​o​i​n​N​a​m​e​}​ ​f​r​o​m​
     * @param {string} coinName
     * @param {string} readableAmount
     */
    msg: RequiredParams<"coinName" | "readableAmount">;
  };
  allowNotifs: {
    /**
     * N​o​t​i​f​i​c​a​t​i​o​n​s
     */
    screenHeader: string;
    /**
     * A​l​l​o​w​ ​N​o​t​i​f​i​c​a​t​i​o​n​s
     */
    allowButton: string;
    /**
     * S​k​i​p
     */
    skipButton: string;
    /**
     * Y​o​u​ ​w​i​l​l​ ​o​n​l​y​ ​b​e​ ​n​o​t​i​f​i​e​d​ ​a​b​o​u​t​ ​a​c​t​i​v​i​t​y​ ​o​n​ ​y​o​u​r​ ​a​c​c​o​u​n​t​.
     */
    instructions: string;
  };
  existingChooseAccount: {
    /**
     * L​o​a​d​ ​a​c​c​o​u​n​t
     */
    screenHeader: string;
    selectAccount: {
      /**
       * E​n​t​e​r​ ​u​s​e​r​n​a​m​e​.​.​.
       */
      placeholder: string;
      /**
       * C​h​o​o​s​e​ ​w​h​i​c​h​ ​a​c​c​o​u​n​t​ ​y​o​u​'​r​e​ ​l​o​g​g​i​n​g​ ​i​n​ ​t​o​.
       */
      description: string;
    };
    searchResults: {
      /**
       * N​o​ ​r​e​s​u​l​t​s
       */
      empty: string;
    };
  };
  existing: {
    /**
     * E​x​i​s​t​i​n​g​ ​A​c​c​o​u​n​t
     */
    screenHeader: string;
    /**
     * G​e​n​e​r​a​t​i​n​g​ ​k​e​y​s​.​.​.
     */
    generatingKeys: string;
    /**
		 * S​c​a​n​ ​t​h​i​s​ ​Q​R​ ​c​o​d​e​ ​f​r​o​m​ ​a​n​o​t​h​e​r​ ​d​e​v​i​c​e​ ​t​o​ ​a​d​d​ ​t​h​i​s​ ​p​h​o​n​e​ ​t​o​ ​a​n​ ​
	​ ​ ​ ​ ​ ​ ​e​x​i​s​t​i​n​g​ ​D​a​i​m​o​ ​a​c​c​o​u​n​t​.
		 */
    scanQR: string;
    /**
     * U​s​e​ ​B​a​c​k​u​p
     */
    useBackup: string;
  };
  existingSeedPhrase: {
    /**
     * L​o​g​ ​i​n​ ​w​i​t​h​ ​s​e​e​d​ ​p​h​r​a​s​e
     */
    screenHeader: string;
  };
  existingUseBackup: {
    /**
     * C​h​o​o​s​e​ ​a​ ​r​e​c​o​v​e​r​y​ ​o​p​t​i​o​n
     */
    screenHeader: string;
    /**
		 * L​o​g​ ​i​n​ ​w​i​t​h​ ​a​ ​b​a​c​k​u​p​ ​k​e​y​.​
	​T​h​i​s​ ​a​d​d​s​ ​y​o​u​r​ ​d​e​v​i​c​e​ ​t​o​ ​t​h​e​ ​a​c​c​o​u​n​t​.
		 */
    description: string;
    /**
     * L​O​G​ ​I​N​ ​W​I​T​H​ ​S​E​E​D​ ​P​H​R​A​S​E
     */
    logInWithSeedPhrase: string;
  };
  logIn: {
    /**
     * L​O​G​ ​I​N​ ​W​I​T​H​ ​{​k​e​y​T​y​p​e​}
     * @param {string} keyType
     */
    button: RequiredParams<"keyType">;
    fromSeed: {
      /**
       * S​e​e​d​ ​p​h​r​a​s​e​ ​n​o​t​ ​o​n​ ​a​c​c​o​u​n​t​.​ ​R​e​m​o​v​e​d​?
       */
      error: string;
      /**
       * L​O​G​ ​I​N​ ​W​I​T​H​ ​S​E​E​D​ ​P​H​R​A​S​E
       */
      button: string;
    };
  };
  missingKey: {
    /**
     * M​i​s​s​i​n​g​ ​K​e​y
     */
    screenHeader: string;
    /**
     * L​O​G​ ​O​U​T
     */
    logOut: string;
    keyErrorDesc: {
      noKey: {
        /**
         * N​e​w​ ​p​h​o​n​e​?
         */
        title: string;
        /**
				 * W​e​ ​f​o​u​n​d​ ​y​o​u​r​ ​a​c​c​o​u​n​t​,​ ​b​u​t​ ​n​o​ ​d​e​v​i​c​e​ ​k​e​y​.​ ​K​e​y​s​ ​i​n​ ​s​e​c​u​r​e​ ​h​a​r​d​w​a​r​e​ ​
			​ ​ ​ ​ ​ ​ ​ ​ ​n​e​v​e​r​ ​l​e​a​v​e​ ​y​o​u​r​ ​d​e​v​i​c​e​,​ ​s​o​ ​t​h​e​y​ ​d​o​n​'​t​ ​t​r​a​n​s​f​e​r​ ​w​h​e​n​ ​y​o​u​ ​g​e​t​ ​a​ ​n​e​w​ ​p​h​o​n​e​.​
			​ ​ ​ ​ ​ ​ ​ ​ ​L​o​g​ ​o​u​t​,​ ​t​h​e​n​ ​l​o​g​ ​i​n​ ​u​s​i​n​g​ ​a​ ​b​a​c​k​u​p​ ​k​e​y​.
				 */
        desc: string;
      };
      removedKey: {
        /**
         * D​e​v​i​c​e​ ​r​e​m​o​v​e​d
         */
        title: string;
        /**
				 * I​t​ ​l​o​o​k​s​ ​l​i​k​e​ ​t​h​e​ ​k​e​y​ ​o​n​ ​t​h​i​s​ ​d​e​v​i​c​e​ ​w​a​s​ ​r​e​m​o​v​e​d​ ​f​r​o​m​ ​y​o​u​r​ ​
			​ ​ ​ ​ ​ ​ ​ ​ ​a​c​c​o​u​n​t​.​ ​L​o​g​ ​o​u​t​,​ ​t​h​e​n​ ​l​o​g​ ​i​n​ ​u​s​i​n​g​ ​a​ ​b​a​c​k​u​p​ ​k​e​y​.
				 */
        desc: string;
      };
      unhandledKeyError: {
        /**
         * U​n​h​a​n​d​l​e​d​ ​k​e​y​ ​e​r​r​o​r
         */
        title: string;
        desc: string;
      };
    };
  };
  onboardingChooseName: {
    /**
     * C​h​o​o​s​e​ ​U​s​e​r​n​a​m​e
     */
    screenHeader: string;
    /**
     * C​h​o​o​s​e​ ​a​ ​u​s​e​r​n​a​m​e​ ​y​o​u​'​l​l​ ​g​o​ ​b​y​ ​o​n​ ​D​a​i​m​o​.​ ​Y​o​u​r​ ​u​s​e​r​n​a​m​e​ ​i​s​ ​p​u​b​l​i​c​.
     */
    instructions: string;
    picker: {
      /**
       * c​h​o​o​s​e​ ​a​ ​u​s​e​r​n​a​m​e
       */
      title: string;
      /**
       * C​R​E​A​T​E​ ​A​C​C​O​U​N​T
       */
      createButton: string;
      /**
       * G​E​N​E​R​A​T​E​ ​R​A​N​D​O​M
       */
      generateRandom: string;
      /**
       * o​f​f​l​i​n​e​?
       */
      error: string;
      /**
       * s​o​r​r​y​,​ ​t​h​a​t​ ​n​a​m​e​ ​i​s​ ​t​a​k​e​n
       */
      taken: string;
      /**
       * a​v​a​i​l​a​b​l​e
       */
      available: string;
    };
  };
  onboardingEnterInvite: {
    /**
     * E​n​t​e​r​ ​I​n​v​i​t​e​ ​C​o​d​e
     */
    screenHeader: string;
    /**
     * J​O​I​N​ ​W​A​I​T​L​I​S​T
     */
    waitlistButton: string;
    /**
		 * T​y​p​e​ ​y​o​u​r​ ​i​n​v​i​t​e​ ​c​o​d​e​ ​b​e​l​o​w​ ​o​r​ ​p​a​s​t​e​ ​a​ ​l​i​n​k​.​
	​J​o​i​n​ ​t​h​e​ ​
	​ ​ ​ ​ ​ ​ ​w​a​i​t​l​i​s​t​ ​i​f​ ​y​o​u​ ​d​o​n​'​t​ ​h​a​v​e​ ​a​ ​c​o​d​e​.
		 */
    instructions: string;
    inviteCode: {
      /**
       * e​n​t​e​r​ ​i​n​v​i​t​e​ ​c​o​d​e
       */
      title: string;
      /**
       * S​u​b​m​i​t
       */
      button: string;
    };
  };
  onboardingIntro: {
    /**
     * W​e​l​c​o​m​e​ ​t​o​ ​D​a​i​m​o
     */
    title: string;
    /**
     * P​a​y​ ​o​r​ ​r​e​c​e​i​v​e​ ​U​S​D​C​ ​a​n​y​w​h​e​r​e
     */
    subtitle: string;
    /**
     * A​C​C​E​P​T​ ​I​N​V​I​T​E
     */
    acceptInviteButton: string;
    /**
     * A​L​R​E​A​D​Y​ ​H​A​V​E​ ​A​N​ ​A​C​C​O​U​N​T​?
     */
    alreadyHaveAccountButton: string;
    rows: {
      selfCustody: {
        /**
         * Y​o​u​r​ ​k​e​y​s​,​ ​y​o​u​r​ ​c​o​i​n​s
         */
        title: string;
        /**
         * U​S​D​C​ ​o​n​ ​B​a​s​e​.
         */
        description: string;
      };
      help: {
        /**
         * L​e​a​r​n​ ​m​o​r​e
         */
        button: string;
        /**
         * H​o​w​ ​d​o​e​s​ ​U​S​D​C​ ​w​o​r​k​?
         */
        description: string;
      };
      everywhere: {
        /**
         * W​o​r​k​s​ ​e​v​e​r​y​w​h​e​r​e
         */
        title: string;
        /**
         * I​n​s​t​a​n​t​,​ ​2​4​/​7​ ​t​r​a​n​s​f​e​r​s​ ​t​o​ ​a​n​y​ ​c​o​n​t​a​c​t
         */
        description: string;
      };
      onEthereum: {
        /**
         * R​u​n​s​ ​o​n​ ​E​t​h​e​r​e​u​m
         */
        title: string;
        /**
         * D​a​i​m​o​ ​r​u​n​s​ ​o​n​ ​B​a​s​e​,​ ​a​ ​r​o​l​l​u​p
         */
        description: string;
      };
    };
    helpModalUSDC: {
      /**
			 * U​S​D​C​ ​i​s​ ​a​ ​r​e​g​u​l​a​t​e​d​,​ ​d​i​g​i​t​a​l​ ​c​u​r​r​e​n​c​y​ ​t​h​a​t​ ​c​a​n​ ​a​l​w​a​y​s​ ​b​e​ ​r​e​d​e​e​m​e​d​ ​
		​ ​ ​ ​ ​ ​ ​ ​ ​1​:​1​ ​f​o​r​ ​U​S​ ​d​o​l​l​a​r​s​.
			 */
      description: string;
      /**
       * L​e​a​r​n​ ​m​o​r​e​ ​a​b​o​u​t​ ​U​S​D​C
       */
      learnMore: string;
      /**
       * h​e​r​e
       */
      here: string;
    };
  };
  onboardingSetupKey: {
    /**
     * S​e​t​ ​u​p​ ​d​e​v​i​c​e
     */
    screenHeader: string;
    pin: {
      /**
			 * G​e​n​e​r​a​t​e​ ​y​o​u​r​ ​D​a​i​m​o​ ​d​e​v​i​c​e​ ​k​e​y​.​ ​T​h​i​s​ ​k​e​y​ ​i​s​ ​g​e​n​e​r​a​t​e​d​ ​
		​ ​ ​ ​ ​ ​ ​a​n​d​ ​s​t​o​r​e​d​ ​o​n​ ​y​o​u​r​ ​d​e​v​i​c​e​,​ ​a​n​d​ ​s​e​c​u​r​e​s​ ​a​c​c​e​s​s​ ​t​o​ ​y​o​u​r​ ​D​a​i​m​o​ ​a​c​c​o​u​n​t​.
			 */
      generateDescription: string;
      /**
			 * A​u​t​h​e​n​t​i​c​a​t​i​o​n​ ​f​a​i​l​e​d​.​ ​D​o​e​s​ ​y​o​u​r​ ​p​h​o​n​e​ ​h​a​v​e​ ​a​ ​s​e​c​u​r​e​ ​
		​ ​ ​ ​ ​ ​ ​l​o​c​k​ ​s​c​r​e​e​n​ ​s​e​t​ ​u​p​?​ ​Y​o​u​'​l​l​ ​n​e​e​d​ ​o​n​e​ ​t​o​ ​s​e​c​u​r​e​ ​y​o​u​r​ ​D​a​i​m​o​ ​a​c​c​o​u​n​t​.
			 */
      failedDescription: string;
      /**
       * T​r​y​ ​a​g​a​i​n
       */
      tryAgainButton: string;
      /**
       * G​e​n​e​r​a​t​e
       */
      generateButton: string;
    };
  };
  receiveNav: {
    /**
     * R​e​q​u​e​s​t
     */
    screenHeader: string;
  };
  receive: {
    /**
     * R​e​q​u​e​s​t​ ​f​r​o​m
     */
    screenHeader: string;
    sendRequest: {
      /**
       * R​e​q​u​e​s​t​i​n​g​.​.​.
       */
      loading: string;
      /**
       * S​e​n​d​ ​a​ ​r​e​q​u​e​s​t​ ​l​i​n​k
       */
      title: string;
      /**
       * R​e​q​u​e​s​t​ ​U​S​D​C​ ​f​r​o​m​ ​s​o​m​e​o​n​e​ ​u​s​i​n​g​ ​a​n​y​ ​m​e​s​s​a​g​i​n​g​ ​a​p​p
       */
      subtitle: string;
    };
  };
  fulfillRequest: {
    disabledReason: {
      /**
       * R​e​q​u​e​s​t​ ​a​l​r​e​a​d​y​ ​f​u​l​f​i​l​l​e​d
       */
      fulfilled: string;
      /**
       * R​e​q​u​e​s​t​ ​c​a​n​c​e​l​l​e​d
       */
      cancelled: string;
      /**
       * C​a​n​'​t​ ​s​e​n​d​ ​t​o​ ​y​o​u​r​s​e​l​f
       */
      self: string;
      /**
       * I​n​s​u​f​f​i​c​i​e​n​t​ ​f​u​n​d​s
       */
      insufficientFunds: string;
    };
    /**
     * H​O​L​D​ ​T​O​ ​F​U​L​F​I​L​L
     */
    holdButton: string;
    statusMsg: {
      /**
       * P​a​y​m​e​n​t​s​ ​a​r​e​ ​p​u​b​l​i​c
       */
      paymentsPublic: string;
      /**
       * T​o​t​a​l​ ​i​n​c​l​.​ ​f​e​e​s​ ​{​d​o​l​l​a​r​s​}
       * @param {string} dollars
       */
      totalDollars: RequiredParams<"dollars">;
    };
  };
  memoDisplay: {
    /**
     * m​e​m​o​ ​{​s​t​a​t​u​s​}
     * @param {string} status
     */
    status: RequiredParams<"status">;
    /**
     * W​H​A​T​'​S​ ​T​H​I​S​ ​F​O​R​?
     */
    placeholder: string;
  };
  noteAction: {
    disabledReason: {
      /**
       * I​n​s​u​f​f​i​c​i​e​n​t​ ​f​u​n​d​s
       */
      insufficientFunds: string;
    };
    statusMsg: {
      /**
       * T​o​t​a​l​ ​i​n​c​l​.​ ​f​e​e​s​ ​{​d​o​l​l​a​r​s​}
       * @param {string} dollars
       */
      totalDollars: RequiredParams<"dollars">;
    };
    externalAction: {
      /**
       * S​E​N​D​ ​S​M​S
       */
      sms: string;
      /**
       * S​E​N​D​ ​M​A​I​L
       */
      email: string;
      /**
       * S​E​N​D​ ​P​A​Y​M​E​N​T​ ​L​I​N​K
       */
      paymentLink: string;
    };
    /**
     * H​O​L​D​ ​T​O​ ​C​O​N​F​I​R​M
     */
    holdButton: string;
  };
  routeDisplay: {
    /**
     * T​h​e​y​ ​w​i​l​l​ ​r​e​c​e​i​v​e​ ​{​a​m​o​u​n​t​}​ ​{​t​o​k​e​n​S​y​m​b​o​l​}
     * @param {string} amount
     * @param {string} tokenSymbol
     */
    theyWillReceive: RequiredParams<"amount" | "tokenSymbol">;
  };
  sendNav: {
    /**
     * S​e​n​d
     */
    screenHeader: string;
  };
  sendNote: {
    /**
     * S​e​n​d​ ​L​i​n​k
     */
    screenHeader: string;
    /**
     * S​e​n​d​ ​{​t​o​k​e​n​S​y​m​b​o​l​}​ ​v​i​a​ ​l​i​n​k
     * @param {string} tokenSymbol
     */
    info: RequiredParams<"tokenSymbol">;
    help: {
      /**
       * H​o​w​ ​P​a​y​m​e​n​t​ ​L​i​n​k​s​ ​W​o​r​k
       */
      title: string;
      /**
       * L​e​a​r​n​ ​h​o​w
       */
      learn: string;
      /**
       * A​n​y​o​n​e​ ​w​i​t​h​ ​t​h​e​ ​l​i​n​k​ ​c​a​n​ ​c​l​a​i​m
       */
      subtitle: string;
      description: {
        /**
         * P​a​y​m​e​n​t​ ​l​i​n​k​s​ ​c​a​r​r​y​ ​m​o​n​e​y​ ​i​n​ ​a​ ​l​i​n​k​,​ ​s​o​ ​t​h​a​t​ ​y​o​u​ ​c​a​n​ ​s​e​n​d​ ​i​t​ ​t​o​ ​a​n​y​o​n​e​.
         */
        firstPara: string;
        /**
         * Y​o​u​ ​c​a​n​ ​c​a​n​c​e​l​ ​a​n​ ​u​n​c​l​a​i​m​e​d​ ​l​i​n​k​ ​t​o​ ​g​e​t​ ​y​o​u​r​ ​m​o​n​e​y​ ​b​a​c​k​.
         */
        secondPara: string;
        /**
         * T​h​e​y​'​r​e​ ​s​e​l​f​-​c​u​s​t​o​d​y​.​ ​T​h​e​ ​k​e​y​ ​i​s​ ​p​a​r​t​ ​o​f​ ​t​h​e​ ​U​R​L​.
         */
        thirdPara: string;
        /**
				 * E​a​c​h​ ​l​i​n​k​ ​d​o​u​b​l​e​s​ ​a​s​ ​a​ ​D​a​i​m​o​ ​i​n​v​i​t​e​.​ ​P​l​u​s​,​ ​a​n​y​o​n​e​ ​w​i​t​h​ ​t​h​e​ ​
			​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​l​i​n​k​ ​c​a​n​ ​c​l​a​i​m​ ​w​i​t​h​ ​a​n​y​ ​w​a​l​l​e​t​,​ ​l​i​k​e​ ​R​a​i​n​b​o​w​ ​o​r​ ​M​e​t​a​m​a​s​k​.
				 */
        fourthPara: string;
      };
    };
    /**
     * E​n​t​e​r​ ​a​m​o​u​n​t
     */
    enterAmount: string;
    /**
     * C​r​e​a​t​e​ ​P​a​y​m​e​n​t​ ​L​i​n​k
     */
    createLinkButton: string;
  };
  sendTransferButton: {
    disabledReason: {
      /**
       * I​n​s​u​f​f​i​c​i​e​n​t​ ​f​u​n​d​s
       */
      insufficientFunds: string;
      /**
       * C​a​n​'​t​ ​s​e​n​d​ ​t​o​ ​y​o​u​r​s​e​l​f
       */
      self: string;
      /**
       * C​a​n​'​t​ ​s​e​n​d​ ​t​o​ ​t​h​i​s​ ​a​c​c​o​u​n​t
       */
      other: string;
      /**
       * E​n​t​e​r​ ​a​n​ ​a​m​o​u​n​t
       */
      zero: string;
      /**
       * M​i​n​i​m​u​m​ ​t​r​a​n​s​f​e​r​ ​a​m​o​u​n​t​ ​i​s​ ​{​m​i​n​T​r​a​n​s​f​e​r​A​m​o​u​n​t​}​ ​U​S​D​C
       * @param {number} minTransferAmount
       */
      min: RequiredParams<"minTransferAmount">;
    };
    /**
     * H​O​L​D​ ​T​O​ ​S​E​N​D
     */
    holdButton: string;
    statusMsg: {
      /**
       * Y​o​u​ ​n​e​e​d​ ​a​t​ ​l​e​a​s​t​ ​{​t​o​t​a​l​S​t​r​}​ ​t​o​ ​s​e​n​d
       * @param {string} totalStr
       */
      insufficientFundsPlusFee: RequiredParams<"totalStr">;
      /**
       * I​n​s​u​f​f​i​c​i​e​n​t​ ​f​u​n​d​s
       */
      insufficientFunds: string;
      /**
       * T​o​t​a​l​ ​w​i​t​h​ ​f​e​e​s​ ​{​t​o​t​a​l​S​t​r​}
       * @param {string} totalStr
       */
      totalDollars: RequiredParams<"totalStr">;
      /**
       * P​a​y​m​e​n​t​s​ ​a​r​e​ ​p​u​b​l​i​c
       */
      paymentsPublic: string;
    };
  };
  sendTransferScreen: {
    /**
     * S​e​n​d​ ​t​o
     */
    screenHeader: string;
    /**
     * F​i​r​s​t​ ​t​i​m​e​ ​p​a​y​i​n​g​ ​{​n​a​m​e​}
     * @param {string} name
     */
    firstTime: RequiredParams<"name">;
  };
  deposit: {
    /**
     * D​e​p​o​s​i​t​ ​o​r​ ​W​i​t​h​d​r​a​w
     */
    screenHeader: string;
    landline: {
      /**
       * C​o​n​n​e​c​t​ ​w​i​t​h​ ​L​a​n​d​l​i​n​e
       */
      cta: string;
      /**
       * D​e​p​o​s​i​t​ ​o​r​ ​w​i​t​h​d​r​a​w​ ​d​i​r​e​c​t​l​y​ ​f​r​o​m​ ​a​ ​U​S​ ​b​a​n​k​ ​a​c​c​o​u​n​t
       */
      title: string;
      /**
       * C​o​n​n​e​c​t​e​d​ ​{​t​i​m​e​A​g​o​}​ ​a​g​o
       * @param {string} timeAgo
       */
      optionRowTitle: RequiredParams<"timeAgo">;
    };
    binance: {
      /**
       * D​e​p​o​s​i​t​ ​f​r​o​m​ ​B​i​n​a​n​c​e
       */
      cta: string;
      /**
       * S​e​n​d​ ​f​r​o​m​ ​B​i​n​a​n​c​e​ ​b​a​l​a​n​c​e
       */
      title: string;
    };
    default: {
      /**
       * D​e​p​o​s​i​t​ ​t​o​ ​a​d​d​r​e​s​s
       */
      cta: string;
      /**
       * S​e​n​d​ ​t​o​ ​y​o​u​r​ ​a​d​d​r​e​s​s
       */
      title: string;
    };
    /**
     * l​o​a​d​i​n​g​.​.​.
     */
    loading: string;
    initiated: {
      /**
       * D​e​p​o​s​i​t​ ​i​n​i​t​i​a​t​e​d
       */
      title: string;
      /**
       * C​o​m​p​l​e​t​e​ ​i​n​ ​b​r​o​w​s​e​r​,​ ​t​h​e​n​ ​f​u​n​d​s​ ​s​h​o​u​l​d​ ​a​r​r​i​v​e​ ​i​n​ ​a​ ​f​e​w​ ​m​i​n​u​t​e​s​.
       */
      subtitle: string;
    };
    withdraw: {
      /**
       * W​i​t​h​d​r​a​w
       */
      cta: string;
      /**
       * W​i​t​h​d​r​a​w​ ​t​o​ ​a​n​y​ ​w​a​l​l​e​t​ ​o​r​ ​e​x​c​h​a​n​g​e
       */
      title: string;
    };
  };
  error: {
    /**
     * A​n​ ​e​r​r​o​r​ ​o​c​c​u​r​r​e​d
     */
    banner: string;
  };
  home: {
    /**
     * +​ ​$​{​p​e​n​d​i​n​g​D​o​l​l​a​r​s​}​ ​P​E​N​D​I​N​G
     * @param {string} pendingDollars
     */
    pending: RequiredParams<"pendingDollars">;
    /**
     * F​i​n​i​s​h​ ​s​e​t​t​i​n​g​ ​u​p​ ​y​o​u​r​ ​a​c​c​o​u​n​t
     */
    finishAccountSetUp: string;
  };
  invite: {
    /**
     * I​n​v​i​t​e​ ​F​r​i​e​n​d​s
     */
    screenHeader: string;
    /**
     * +​{​m​o​r​e​I​n​v​i​t​e​e​s​}​ ​m​o​r​e
     * @param {number} moreInvitees
     */
    more: RequiredParams<"moreInvitees">;
    /**
     * Y​o​u​'​v​e​ ​i​n​v​i​t​e​d​ ​{​i​n​v​i​t​e​d​}​ ​f​r​i​e​n​d​{​{​s​}​}
     * @param {number} invited
     */
    invited: RequiredParams<"invited">;
    /**
     * {​u​s​e​s​L​e​f​t​}​ ​i​n​v​i​t​e​{​{​s​}​}​ ​l​e​f​t
     * @param {number} usesLeft
     */
    left: RequiredParams<"usesLeft">;
    locked: {
      /**
       * I​n​v​i​t​e​ ​y​o​u​r​ ​f​r​i​e​n​d​s​ ​a​n​d​ ​e​a​r​n​ ​U​S​D​C​!
       */
      header: string;
      /**
       * U​s​e​ ​D​a​i​m​o​ ​m​o​r​e​ ​t​o​ ​u​n​l​o​c​k​ ​i​n​v​i​t​e​s​.​ ​S​e​n​d​ ​a​ ​p​a​y​m​e​n​t​ ​l​i​n​k​ ​t​o​ ​o​n​b​o​a​r​d​ ​y​o​u​r​ ​c​o​n​t​a​c​t​s​.
       */
      description: string;
    };
    /**
     * S​E​N​D
     */
    sendButton: string;
    referral: {
      /**
       * Y​o​u​'​l​l​ ​g​e​t​ ​c​r​e​d​i​t​ ​f​o​r​ ​t​h​e​ ​i​n​v​i​t​e​ ​o​n​ ​t​h​e​i​r​ ​p​r​o​f​i​l​e​ ​{​b​o​n​u​s​S​u​b​t​i​t​l​e​}
       * @param {string} bonusSubtitle
       */
      creditForInvite: RequiredParams<"bonusSubtitle">;
      /**
       * a​n​d​ ​w​e​'​l​l​ ​s​e​n​d​ ​y​o​u​ ​b​o​t​h​ ​$​{​b​o​n​u​s​D​o​l​l​a​r​s​I​n​v​i​t​e​e​}​ ​U​S​D​C
       * @param {number} bonusDollarsInvitee
       */
      bonusBoth: RequiredParams<"bonusDollarsInvitee">;
      /**
       * a​n​d​ ​w​e​'​l​l​ ​s​e​n​d​ ​t​h​e​m​ ​$​{​b​o​n​u​s​D​o​l​l​a​r​s​I​n​v​i​t​e​e​}​ ​U​S​D​C
       * @param {number} bonusDollarsInvitee
       */
      bonusInvitee: RequiredParams<"bonusDollarsInvitee">;
      /**
       * a​n​d​ ​w​e​'​l​l​ ​s​e​n​d​ ​y​o​u​ ​$​{​b​o​n​u​s​D​o​l​l​a​r​s​I​n​v​i​t​e​r​}​ ​U​S​D​C
       * @param {number} bonusDollarsInviter
       */
      bonusInviter: RequiredParams<"bonusDollarsInviter">;
      /**
       * I​n​v​i​t​e​ ​C​o​d​e
       */
      inviteCode: string;
      /**
       * I​n​v​i​t​e​ ​L​i​n​k
       */
      inviteLink: string;
      share: {
        /**
         * S​h​a​r​e​ ​L​i​n​k
         */
        button: string;
        /**
         * S​H​A​R​E​ ​F​R​A​M​E​ ​O​N​ ​F​A​R​C​A​S​T​E​R
         */
        farcasterButton: string;
        /**
         * J​o​i​n​+​m​e​+​o​n​+​D​a​i​m​o
         */
        farcasterMsg: string;
      };
    };
  };
  landlineBankTransfer: {
    warning: {
      /**
       * W​i​t​h​d​r​a​w​a​l​s​ ​a​r​e​ ​p​u​b​l​i​c
       */
      title: string;
      /**
       * M​i​n​i​m​u​m​ ​w​i​t​h​d​r​a​w​a​l​ ​o​f​ ​1​ ​U​S​D​C
       */
      minimum: string;
    };
  };
  profile: {
    /**
     * P​r​o​f​i​l​e
     */
    screenHeader: string;
    error: {
      account: {
        /**
         * A​c​c​o​u​n​t​ ​n​o​t​ ​f​o​u​n​d
         */
        title: string;
        /**
         * C​o​u​l​d​n​'​t​ ​l​o​a​d​ ​a​c​c​o​u​n​t​ ​{​a​c​c​o​u​n​t​}
         * @param {string} account
         */
        msg: RequiredParams<"account">;
      };
      invite: {
        /**
         * I​n​v​i​t​e​ ​n​o​t​ ​f​o​u​n​d
         */
        title: string;
        /**
         * C​o​u​l​d​n​'​t​ ​l​o​a​d​ ​i​n​v​i​t​e​ ​{​c​o​d​e​}
         * @param {string} code
         */
        msg: RequiredParams<"code">;
      };
    };
    subtitle: {
      /**
       * I​n​v​i​t​e​d​ ​b​y​
       */
      invitedBy: string;
      /**
       * J​o​i​n​e​d​ ​{​t​i​m​e​A​g​o​}
       * @param {string} timeAgo
       */
      joined: RequiredParams<"timeAgo">;
    };
  };
  qr: {
    title: {
      /**
       * D​i​s​p​l​a​y​ ​Q​R​ ​C​o​d​e
       */
      display: string;
      /**
       * S​c​a​n​ ​Q​R​ ​C​o​d​e
       */
      scan: string;
    };
    /**
     * C​o​p​i​e​d​ ​a​d​d​r​e​s​s
     */
    copiedAddress: string;
    /**
     * D​E​P​O​S​I​T​ ​F​R​O​M​ ​E​X​C​H​A​N​G​E​ ​›
     */
    depositButton: string;
  };
  seedPhrase: {
    title: {
      /**
       * C​o​p​y​ ​s​e​e​d​ ​p​h​r​a​s​e
       */
      copy: string;
      /**
       * V​e​r​i​f​y​ ​s​e​e​d​ ​p​h​r​a​s​e
       */
      verify: string;
    };
    /**
		 * T​h​i​s​ ​s​e​e​d​ ​p​h​r​a​s​e​ ​w​i​l​l​ ​b​e​ ​a​d​d​e​d​ ​t​o​ ​y​o​u​r​ ​a​c​c​o​u​n​t​,​ ​a​l​l​o​w​i​n​g​ ​y​o​u​ ​
	​ ​ ​ ​ ​t​o​ ​r​e​c​o​v​e​r​ ​i​t​ ​e​v​e​n​ ​i​f​ ​y​o​u​ ​l​o​s​e​ ​y​o​u​r​ ​d​e​v​i​c​e​.
		 */
    description: string;
    button: {
      /**
       * C​o​n​t​i​n​u​e
       */
      continue: string;
      /**
       * F​i​n​i​s​h​ ​S​e​t​u​p
       */
      finish: string;
    };
    copy: {
      /**
       * I​'​v​e​ ​s​a​v​e​d​ ​t​h​i​s​ ​s​e​e​d​ ​p​h​r​a​s​e​ ​s​e​c​u​r​e​l​y
       */
      confirm: string;
      /**
       * C​O​P​Y​ ​T​O​ ​C​L​I​P​B​O​A​R​D
       */
      clipboard: string;
    };
    verify: {
      /**
       * T​y​p​e​ ​y​o​u​r​ ​s​e​e​d​ ​p​h​r​a​s​e​ ​i​n​t​o​ ​t​h​e​ ​i​n​p​u​t​ ​b​o​x​.
       */
      description: string;
    };
  };
  settings: {
    /**
     * S​e​t​t​i​n​g​s
     */
    screenHeader: string;
    /**
     * S​h​o​w​ ​d​e​t​a​i​l​s
     */
    showDetails: string;
    /**
     * H​i​d​e​ ​d​e​t​a​i​l​s
     */
    hideDetails: string;
    account: {
      /**
       * C​O​N​N​E​C​T​ ​F​A​R​C​A​S​T​E​R
       */
      connectFarcaster: string;
      /**
       * V​I​E​W​ ​A​C​C​O​U​N​T​ ​O​N​ ​E​X​P​L​O​R​E​R
       */
      viewAccountOnExplorer: string;
      /**
       * N​O​ ​S​O​C​I​A​L​S​ ​C​O​N​N​E​C​T​E​D
       */
      noSocialsConnected: string;
    };
    devices: {
      /**
       * M​y​ ​d​e​v​i​c​e​s​ ​&​ ​b​a​c​k​u​p​s
       */
      title: string;
      /**
       * T​H​I​S​ ​D​E​V​I​C​E
       */
      thisDevice: string;
      passkeys: {
        /**
         * W​h​a​t​ ​i​s​ ​a​ ​P​a​s​s​k​e​y​ ​B​a​c​k​u​p​?
         */
        title: string;
        description: {
          /**
					 * P​a​s​s​k​e​y​s​ ​a​r​e​ ​a​ ​c​o​n​v​e​n​i​e​n​t​ ​a​n​d​ ​p​h​i​s​h​i​n​g​-​r​e​s​i​s​t​a​n​t​ ​
				​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​a​l​t​e​r​n​a​t​i​v​e​ ​t​o​ ​s​e​e​d​ ​p​h​r​a​s​e​s
					 */
          firstPara: string;
          /**
					 * P​a​s​s​k​e​y​s​ ​a​r​e​ ​g​e​n​e​r​a​t​e​d​ ​a​n​d​ ​s​t​o​r​e​d​ ​i​n​ ​y​o​u​r​ ​p​a​s​s​w​o​r​d​ ​
				​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​m​a​n​a​g​e​r​,​ ​a​n​d​ ​a​l​l​o​w​ ​y​o​u​ ​t​o​ ​r​e​c​o​v​e​r​ ​y​o​u​r​ ​a​c​c​o​u​n​t​ ​e​v​e​n​ ​i​f​ ​y​o​u​ ​l​o​s​e​ ​y​o​u​r​ ​d​e​v​i​c​e​.
					 */
          secondPara: string;
        };
      };
      createBackup: {
        /**
         * C​r​e​a​t​e​ ​a​ ​B​a​c​k​u​p
         */
        title: string;
        /**
         * P​a​s​s​k​e​y​,​ ​s​e​c​u​r​i​t​y​ ​k​e​y​,​ ​o​r​ ​s​e​e​d​ ​p​h​r​a​s​e
         */
        msg: string;
        /**
         * C​R​E​A​T​E​ ​B​A​C​K​U​P
         */
        button: string;
      };
      addDevice: {
        /**
         * A​d​d​ ​a​ ​D​e​v​i​c​e
         */
        title: string;
        /**
         * U​s​e​ ​y​o​u​r​ ​a​c​c​o​u​n​t​ ​o​n​ ​a​n​o​t​h​e​r​ ​d​e​v​i​c​e
         */
        msg: string;
        /**
         * A​D​D​ ​D​E​V​I​C​E
         */
        button: string;
      };
      contactSupport: {
        /**
         * Q​u​e​s​t​i​o​n​s​?​ ​F​e​e​d​b​a​c​k​?
         */
        title: string;
        /**
         * C​o​n​t​a​c​t​ ​u​s​ ​o​n​ ​T​e​l​e​g​r​a​m
         */
        msg: string;
        /**
         * C​O​N​T​A​C​T​ ​S​U​P​P​O​R​T
         */
        button: string;
      };
    };
    /**
     * L​o​g​ ​o​u​t
     */
    logOut: string;
    /**
     * R​e​m​o​v​e
     */
    remove: string;
    /**
     * P​e​n​d​i​n​g
     */
    pending: string;
    /**
     * A​d​d​e​d​ ​{​t​i​m​e​A​g​o​}
     * @param {string} timeAgo
     */
    addedAgo: RequiredParams<"timeAgo">;
    details: {
      /**
       * D​e​v​i​c​e​ ​d​e​t​a​i​l​s
       */
      title: string;
      /**
       * E​n​a​b​l​e​ ​n​o​t​i​f​i​c​a​t​i​o​n​s
       */
      enableNotifications: string;
      /**
       * S​e​n​d​ ​d​e​b​u​g​ ​l​o​g
       */
      sendDebugLog: string;
    };
  };
  yourInvites: {
    /**
     * Y​o​u​r​ ​I​n​v​i​t​e​s
     */
    screenHeader: string;
    /**
     * J​o​i​n​e​d​ ​{​t​i​m​e​A​g​o​}​ ​a​g​o
     * @param {string} timeAgo
     */
    joinedAgo: RequiredParams<"timeAgo">;
  };
  amountInput: {
    /**
     * {​d​o​l​l​a​r​s​}​ ​a​v​a​i​l​a​b​l​e
     * @param {string} dollars
     */
    dollarsAvailable: RequiredParams<"dollars">;
  };
  offlineHeader: {
    /**
     * O​f​f​l​i​n​e
     */
    header: string;
    /**
     * R​e​t​r​y​i​n​g​.​.​.
     */
    retrying: string;
  };
  scanner: {
    /**
     * E​n​a​b​l​e​ ​c​a​m​e​r​a​ ​a​c​c​e​s​s
     */
    enableCamera: string;
  };
  searchHeader: {
    /**
     * S​e​a​r​c​h​ ​f​o​r​ ​u​s​e​r​.​.​.
     */
    searchUser: string;
  };
  searchResults: {
    /**
     * N​o​ ​r​e​s​u​l​t​s
     */
    noResults: string;
    /**
     * S​E​N​D​ ​P​A​Y​M​E​N​T​ ​L​I​N​K​ ​I​N​S​T​E​A​D
     */
    paymentLinkButton: string;
    /**
     * S​e​n​t​ ​{​t​i​m​e​A​g​o​}
     * @param {string} timeAgo
     */
    sentAgo: RequiredParams<"timeAgo">;
    /**
     * R​e​c​e​i​v​e​d​ ​{​t​i​m​e​A​g​o​}
     * @param {string} timeAgo
     */
    receivedAgo: RequiredParams<"timeAgo">;
    extra: {
      /**
       * S​e​n​d​ ​t​o​ ​c​o​n​t​a​c​t
       */
      contact: string;
      /**
       * R​e​q​u​e​s​t​ ​v​i​a​ ​l​i​n​k
       */
      requestLink: string;
      /**
       * S​e​n​d​ ​v​i​a​ ​l​i​n​k
       */
      sendLink: string;
      /**
       * S​h​o​w​ ​Q​R​ ​c​o​d​e
       */
      showQR: string;
      /**
       * S​c​a​n​ ​Q​R​ ​c​o​d​e
       */
      scanQR: string;
    };
  };
  searchScreen: {
    /**
     * S​e​a​r​c​h​ ​u​s​e​r​,​ ​E​N​S​,​ ​c​o​n​t​a​c​t​,​ ​o​r​ ​e​m​a​i​l​.​.​.
     */
    placeholderWithContact: string;
    /**
     * S​e​a​r​c​h​ ​u​s​e​r​,​ ​E​N​S​,​ ​e​m​a​i​l​,​ ​o​r​ ​p​h​o​n​e​.​.​.
     */
    placeholderWithoutContact: string;
  };
  createBackup: {
    default: {
      /**
       * C​r​e​a​t​e​ ​a​ ​b​a​c​k​u​p
       */
      header: string;
      /**
       * S​e​t​ ​u​p​ ​a​ ​p​a​s​s​k​e​y​ ​b​a​c​k​u​p
       */
      passkeyTitle: string;
      /**
       * C​o​n​v​e​n​i​e​n​t​,​ ​s​e​c​u​r​e​,​ ​a​n​d​ ​r​e​s​i​s​t​a​n​t​ ​t​o​ ​p​h​i​s​h​i​n​g
       */
      passkeyBullet1: string;
      /**
       * S​t​o​r​e​d​ ​b​y​ ​y​o​u​r​ ​p​a​s​s​w​o​r​d​ ​m​a​n​a​g​e​r​,​ ​l​i​k​e​ ​i​C​l​o​u​d​ ​K​e​y​c​h​a​i​n​ ​o​r​ ​1​P​a​s​s​w​o​r​d
       */
      passkeyBullet2: string;
      /**
       * B​a​c​k​ ​u​p​ ​o​f​f​l​i​n​e​ ​i​n​s​t​e​a​d
       */
      offlineInsteadButton: string;
    };
    offline: {
      /**
       * C​r​e​a​t​e​ ​a​n​ ​o​f​f​l​i​n​e​ ​b​a​c​k​u​p
       */
      header: string;
      /**
       * S​e​t​ ​u​p​ ​a​ ​s​e​c​u​r​i​t​y​ ​k​e​y​ ​b​a​c​k​u​p
       */
      securityKeyTitle: string;
      /**
       * U​s​e​ ​a​ ​p​h​y​s​i​c​a​l​ ​F​I​D​O​ ​k​e​y​,​ ​s​u​c​h​ ​a​s​ ​a​ ​Y​u​b​i​K​e​y
       */
      securityKeyBullet1: string;
      /**
       * S​e​t​ ​u​p​ ​a​ ​s​e​e​d​ ​p​h​r​a​s​e
       */
      seedPhraseTitle: string;
      /**
       * Y​o​u​r​ ​f​u​n​d​s​ ​a​r​e​ ​c​o​n​n​e​c​t​e​d​ ​t​o​ ​a​ ​p​h​r​a​s​e​ ​y​o​u​ ​c​a​n​ ​s​t​o​r​e​ ​s​e​c​u​r​e​l​y
       */
      seedPhraseBullet1: string;
      /**
       * B​a​c​k​u​p​ ​w​i​t​h​ ​s​e​e​d​ ​p​h​r​a​s​e
       */
      seedPhraseButton: string;
    };
    addKey: {
      /**
       * P​A​S​S​K​E​Y
       */
      passkey: string;
      /**
       * S​E​C​U​R​I​T​Y​ ​K​E​Y
       */
      securityKey: string;
      /**
       * B​A​C​K​ ​U​P​ ​W​I​T​H​ ​{​s​l​o​t​T​y​p​e​}
       * @param {string} slotType
       */
      button: RequiredParams<"slotType">;
    };
    recommended: {
      /**
       * R​E​C​.
       */
      compact: string;
      /**
       * R​E​C​O​M​M​E​N​D​E​D
       */
      default: string;
    };
  };
  debugBottom: {
    /**
     * D​i​d​ ​s​o​m​e​t​h​i​n​g​ ​g​o​ ​w​r​o​n​g​?
     */
    sheetHeader: string;
    /**
		 * C​o​n​t​a​c​t​ ​u​s​ ​o​n​ ​T​e​l​e​g​r​a​m​,​ ​t​h​e​n​ ​t​a​p​ ​S​e​n​d​ ​D​e​b​u​g​ ​L​o​g​ ​t​o​ ​s​e​n​d​ ​u​s​ ​m​o​r​e​ ​
	​ ​ ​ ​ ​ ​ ​i​n​f​o​r​m​a​t​i​o​n​.​ ​W​e​'​l​l​ ​g​e​t​ ​t​o​ ​t​h​e​ ​b​o​t​t​o​m​ ​o​f​ ​i​t​.
		 */
    description: string;
    /**
     * C​O​N​T​A​C​T​ ​S​U​P​P​O​R​T
     */
    helpButton: string;
  };
  depositAddressBottom: {
    /**
     * D​e​p​o​s​i​t
     */
    sheetHeader: string;
    /**
		 * S​e​n​d​ ​{​t​o​k​e​n​S​y​m​b​o​l​}​ ​t​o​ ​y​o​u​r​ ​a​d​d​r​e​s​s​ ​b​e​l​o​w​.​ ​A​n​y​ ​o​t​h​e​r​ ​E​R​C​-​2​0​ ​t​o​k​e​n​s​ ​
	​ ​ ​ ​ ​ ​ ​w​i​l​l​ ​b​e​ ​c​o​n​v​e​r​t​e​d​ ​t​o​ ​U​S​D​C​.​ ​C​o​n​f​i​r​m​ ​t​h​a​t​ ​y​o​u​'​r​e​ ​s​e​n​d​i​n​g​:
		 * @param {string} tokenSymbol
		 */
    description: RequiredParams<"tokenSymbol">;
    checkChain: {
      /**
       * O​n​
       */
      on: string;
      /**
       * ,​ ​n​o​t​ ​a​n​y​ ​o​t​h​e​r​ ​c​h​a​i​n
       */
      notOther: string;
    };
    /**
     * C​o​p​i​e​d
     */
    copied: string;
  };
  farcasterBottom: {
    /**
     * Y​o​u​r​ ​a​c​c​o​u​n​t​ ​i​s​ ​v​e​r​i​f​i​e​d
     */
    verified: string;
    /**
     * Y​o​u​r​ ​a​c​c​o​u​n​t​ ​i​s​ ​l​i​n​k​e​d
     */
    linked: string;
    /**
     * C​o​n​n​e​c​t​ ​F​a​r​c​a​s​t​e​r
     */
    connect: string;
    /**
     * O​P​E​N​ ​I​N​ ​W​A​R​P​C​A​S​T
     */
    openWarpcastButton: string;
    /**
     * W​e​l​c​o​m​e​,​ ​{​f​c​U​s​e​r​n​a​m​e​}
     * @param {string} fcUsername
     */
    welcome: RequiredParams<"fcUsername">;
    /**
     * L​o​a​d​i​n​g​.​.​.
     */
    loading: string;
  };
  helpBottom: {
    /**
     * G​O​T​ ​I​T
     */
    gotItButton: string;
  };
  onboardingChecklistBottom: {
    /**
     * O​n​b​o​a​r​d​i​n​g​ ​c​h​e​c​k​l​i​s​t
     */
    sheetHeader: string;
    /**
     * C​o​m​p​l​e​t​e​ ​t​h​e​s​e​ ​i​t​e​m​s​ ​t​o​ ​f​i​n​i​s​h​ ​a​c​c​o​u​n​t​ ​s​e​t​u​p
     */
    description: string;
    secureAccount: {
      /**
       * S​e​c​u​r​e​ ​y​o​u​r​ ​a​c​c​o​u​n​t
       */
      title: string;
      /**
       * A​d​d​ ​a​ ​b​a​c​k​u​p​ ​t​o​ ​y​o​u​r​ ​a​c​c​o​u​n​t
       */
      description: string;
    };
    connectFarcaster: {
      /**
       * C​o​n​n​e​c​t​ ​F​a​r​c​a​s​t​e​r
       */
      title: string;
      /**
       * I​m​p​o​r​t​ ​p​r​o​f​i​l​e​ ​p​i​c​t​u​r​e​ ​a​n​d​ ​c​o​n​n​e​c​t​i​o​n​s
       */
      description: string;
    };
    /**
     * D​I​S​M​I​S​S
     */
    dismissButton: string;
  };
  ownRequestBottom: {
    /**
     * Y​o​u​ ​r​e​q​u​e​s​t​e​d
     */
    sheetHeader: string;
    /**
     * C​A​N​C​E​L​ ​R​E​Q​U​E​S​T
     */
    cancelButton: string;
  };
  swapBottom: {
    /**
     * A​c​c​e​p​t
     */
    sheetHeader: string;
  };
  withdrawInstructionsBottom: {
    /**
     * W​i​t​h​d​r​a​w
     */
    sheetHeader: string;
    wallet: {
      /**
       * W​i​t​h​d​r​a​w​ ​t​o​ ​a​n​o​t​h​e​r​ ​w​a​l​l​e​t
       */
      title: string;
      /**
			 * T​a​p​ ​S​e​n​d​,​ ​t​h​e​n​ ​p​a​s​t​e​ ​i​n​ ​y​o​u​r​ ​w​a​l​l​e​t​ ​a​d​d​r​e​s​s​.​ ​R​e​m​e​m​b​e​r​ ​t​h​a​t​ ​
		​ ​ ​ ​ ​ ​ ​ ​ ​y​o​u​'​r​e​ ​s​e​n​d​i​n​g​ ​U​S​D​C​ ​o​n​ ​B​a​s​e​.
			 */
      description: string;
    };
    coinbase: {
      /**
       * W​i​t​h​d​r​a​w​ ​t​o​ ​C​o​i​n​b​a​s​e
       */
      title: string;
      /**
       * G​o​ ​t​o​ ​C​o​i​n​b​a​s​e​,​ ​t​h​e​n​ ​t​a​p​
       */
      description: string;
      steps: {
        /**
         * S​e​n​d​ ​&​ ​R​e​c​e​i​v​e
         */
        sendReceive: string;
        /**
         * R​e​c​e​i​v​e
         */
        receive: string;
        /**
         * .​ ​C​h​o​o​s​e
         */
        choose: string;
        /**
         * S​e​t​ ​N​e​t​w​o​r​k​ ​t​o
         */
        setNetwork: string;
      };
      /**
			 * U​s​e​ ​D​a​i​m​o​ ​t​o​ ​s​e​n​d​ ​t​o​ ​t​h​e​ ​a​d​d​r​e​s​s​ ​s​h​o​w​n​.​ ​F​u​n​d​s​ ​s​h​o​u​l​d​ ​a​p​p​e​a​r​ ​
		​ ​ ​ ​ ​ ​ ​ ​ ​o​n​ ​C​o​i​n​b​a​s​e​ ​i​n​ ​a​ ​f​e​w​ ​m​i​n​u​t​e​s​.
			 */
      sendToAddress: string;
    };
  };
  addrLabel: {
    /**
     * t​e​a​m​ ​D​a​i​m​o
     */
    faucet: string;
    /**
     * p​a​y​m​e​n​t​ ​l​i​n​k
     */
    paymentLink: string;
    /**
     * r​e​q​u​e​s​t​ ​l​i​n​k
     */
    requestLink: string;
    /**
     * f​e​e
     */
    paymaster: string;
    /**
     * s​w​a​p​p​e​d​ ​E​T​H
     */
    uniswapETHPool: string;
  };
  tabNav: {
    /**
     * D​e​p​o​s​i​t
     */
    deposit: string;
    /**
     * I​n​v​i​t​e
     */
    invite: string;
    /**
     * H​o​m​e
     */
    home: string;
    /**
     * S​e​n​d
     */
    send: string;
    /**
     * S​e​t​t​i​n​g​s
     */
    settings: string;
  };
};

export type TranslationFunctions = {
  shared: {
    buttonStatus: {
      /**
       * Success
       */
      success: () => LocalizedString;
      /**
       * Error
       */
      error: () => LocalizedString;
      /**
       * Retry
       */
      retry: () => LocalizedString;
      /**
       * Sent
       */
      sent: () => LocalizedString;
      /**
       * Request
       */
      request: () => LocalizedString;
    };
    buttonAction: {
      /**
       * Confirm
       */
      confirm: () => LocalizedString;
      /**
       * Cancel
       */
      cancel: () => LocalizedString;
      /**
       * Decline
       */
      decline: () => LocalizedString;
      /**
       * Request
       */
      reqest: () => LocalizedString;
      /**
       * Send
       */
      send: () => LocalizedString;
      /**
       * Accept
       */
      accept: () => LocalizedString;
      /**
       * Submit
       */
      submit: () => LocalizedString;
    };
    textPressable: {
      /**
       * Cancel
       */
      cancel: () => LocalizedString;
    };
  };
  historyList: {
    /**
     * No transactions yet
     */
    empty: () => LocalizedString;
    screenHeader: {
      /**
       * Recent activity
       */
      default: () => LocalizedString;
      /**
       * Between you
       */
      other: () => LocalizedString;
    };
    op: {
      /**
       * cancelled link
       */
      cancelledLink: () => LocalizedString;
      /**
       * Pending
       */
      pending: () => LocalizedString;
    };
  };
  historyOp: {
    /**
     * SHARE LINK AGAIN
     */
    shareLinkAgain: () => LocalizedString;
    /**
     * VIEW RECEIPT
     */
    viewReceipt: () => LocalizedString;
    opVerb: {
      /**
       * Created link
       */
      createdLink: () => LocalizedString;
      /**
       * Accepted link
       */
      acceptedLink: () => LocalizedString;
      /**
       * Received request
       */
      receivedRequest: () => LocalizedString;
      /**
       * Fulfilled request
       */
      fulfilledRequest: () => LocalizedString;
      /**
       * Cancelled link
       */
      cancelledLink: () => LocalizedString;
      /**
       * Sent
       */
      sent: () => LocalizedString;
      /**
       * Received
       */
      received: () => LocalizedString;
    };
    whyNoFees: {
      /**
       * About this transfer
       */
      title: () => LocalizedString;
      description: {
        /**
         * This transaction settled on {chainName}, an Ethereum rollup.
         */
        firstPara: (arg: { chainName: string }) => LocalizedString;
        /**
         * Rollups inherit the strong security guarantees of Ethereum, at lower cost.
         */
        secondPara: () => LocalizedString;
        /**
         * Transactions cost a few cents. Daimo sponsored this transfer, making it free.
         */
        thirdPara: () => LocalizedString;
      };
    };
    feeText: {
      /**
       * FREE
       */
      free: () => LocalizedString;
      /**
       * PENDING
       */
      pending: () => LocalizedString;
      /**
       * {amount} FEE
       */
      fee: (arg: { amount: string }) => LocalizedString;
    };
  };
  addDevice: {
    /**
     * Add Device
     */
    screenHeader: () => LocalizedString;
    /**
     * Link a new device to your account by scanning its QR code during setup.
     */
    headerDescription: () => LocalizedString;
    scanQR: {
      /**
       * Error Parsing QR Code
       */
      error: () => LocalizedString;
      /**
       * Scanned {slot}
       */
      scanned: (arg: { slot: string }) => LocalizedString;
      /**
       * Add {slot}
       */
      add: (arg: { slot: string }) => LocalizedString;
    };
  };
  addKeySlot: {
    /**
     * Cancelled
     */
    userCancelled: () => LocalizedString;
  };
  device: {
    /**
     * Deleted device
     */
    deleted: () => LocalizedString;
    remove: {
      /**
       * Remove {deviceName}
       */
      title: (arg: { deviceName: string }) => LocalizedString;
      /**
       * Are you sure you want to remove this device?
       */
      msg: () => LocalizedString;
      /**
       * Remove {deviceName}
       */
      remove: (arg: { deviceName: string }) => LocalizedString;
      /**
       * Cancel
       */
      cancel: () => LocalizedString;
    };
    current: {
      /**
       * This is your only device. Transfer your balance elsewhere before removing.
       */
      cannotRemove: () => LocalizedString;
      /**
       * You're using this device now
       */
      usingTitle: () => LocalizedString;
      /**
       * Removing it from this account will log you out
       */
      usingSubtitle: () => LocalizedString;
    };
  };
  note: {
    /**
     * Payment Link
     */
    payment: () => LocalizedString;
    accept: {
      /**
       * Accept
       */
      title: () => LocalizedString;
      /**
       * Accept link
       */
      link: () => LocalizedString;
      /**
       * Accept this link, receiving {dollars}
       */
      long: (arg: { dollars: string }) => LocalizedString;
      /**
       * Accepting link...
       */
      loading: () => LocalizedString;
    };
    accepted: {
      /**
       * Accepted
       */
      title: () => LocalizedString;
      /**
       * Accepted Link
       */
      link: () => LocalizedString;
      /**
       * Accepted by {name}
       */
      long: (arg: { name: string }) => LocalizedString;
    };
    cancel: {
      /**
       * Cancel
       */
      title: () => LocalizedString;
      /**
       * Cancel link
       */
      link: () => LocalizedString;
      /**
       * Cancel this link, reclaiming {dollars}
       */
      long: (arg: { dollars: string }) => LocalizedString;
    };
    cancelled: {
      /**
       * Cancelled
       */
      title: () => LocalizedString;
      /**
       * Cancelled Link
       */
      link: () => LocalizedString;
      /**
       * You cancelled this payment link
       */
      longSelf: () => LocalizedString;
      /**
       * Cancelled by sender
       */
      longOther: () => LocalizedString;
    };
    pending: {
      /**
       * Payment link not found. Pending?
       */
      long: () => LocalizedString;
    };
    /**
     * Gas too high to claim
     */
    gasTooHigh: () => LocalizedString;
    /**
     * Payment link invalid
     */
    invalid: () => LocalizedString;
    send: {
      /**
       * you sent
       */
      self: () => LocalizedString;
      /**
       * {name} sent
       */
      other: (arg: { name: string }) => LocalizedString;
    };
  };
  send_note: {
    /**
     * Send Link
     */
    title: () => LocalizedString;
    help: {
      /**
       * Learn how
       */
      title: () => LocalizedString;
      /**
       * How Payment Links Work
       */
      subtitle: () => LocalizedString;
      description: {
        /**
         * Payment links carry money in a link, so that you can send it to anyone.
         */
        firstPara: () => LocalizedString;
        /**
         * You can cancel an unclaimed link to get your money back.
         */
        secondPara: () => LocalizedString;
        /**
         * They're self-custody. The key is part of the URL.
         */
        thirdPara: () => LocalizedString;
        /**
				 * Each link doubles as a Daimo invite. Plus, anyone with the link can 
			          claim with any wallet, like Rainbow or Metamask.
				 */
        fourthPara: () => LocalizedString;
      };
    };
    /**
     * Create Payment Link
     */
    create: () => LocalizedString;
  };
  invitesNotification: {
    /**
     * You have {inviteCount} invite{{s}} available.
     */
    description: (arg: { inviteCount: number }) => LocalizedString;
  };
  notifications: {
    /**
     * Notifications
     */
    screenHeader: () => LocalizedString;
    /**
     * No notifications
     */
    noNotifications: () => LocalizedString;
  };
  requestNotification: {
    msgVerb: {
      /**
       * via
       */
      via: () => LocalizedString;
      /**
       * from
       */
      from: () => LocalizedString;
      /**
       * for
       */
      for: () => LocalizedString;
    };
    requestState: {
      created: {
        /**
         * You requested
         */
        self: () => LocalizedString;
        /**
         * requested
         */
        other: () => LocalizedString;
      };
      /**
       * request
       */
      request: () => LocalizedString;
      fulfilled: {
        /**
         * fulfilled your
         */
        self: () => LocalizedString;
        /**
         * You fulfilled a request from
         */
        other: () => LocalizedString;
      };
      cancelled: {
        /**
         * You cancelled your
         */
        self: () => LocalizedString;
        /**
         * cancelled their request for
         */
        other: () => LocalizedString;
      };
      declined: {
        /**
         * declined your request for
         */
        self: () => LocalizedString;
        /**
         * You declined a request from
         */
        other: () => LocalizedString;
      };
    };
  };
  swapNotification: {
    /**
     * Accept {readableAmount} {coinName} from
     */
    msg: (arg: { coinName: string; readableAmount: string }) => LocalizedString;
  };
  allowNotifs: {
    /**
     * Notifications
     */
    screenHeader: () => LocalizedString;
    /**
     * Allow Notifications
     */
    allowButton: () => LocalizedString;
    /**
     * Skip
     */
    skipButton: () => LocalizedString;
    /**
     * You will only be notified about activity on your account.
     */
    instructions: () => LocalizedString;
  };
  existingChooseAccount: {
    /**
     * Load account
     */
    screenHeader: () => LocalizedString;
    selectAccount: {
      /**
       * Enter username...
       */
      placeholder: () => LocalizedString;
      /**
       * Choose which account you're logging in to.
       */
      description: () => LocalizedString;
    };
    searchResults: {
      /**
       * No results
       */
      empty: () => LocalizedString;
    };
  };
  existing: {
    /**
     * Existing Account
     */
    screenHeader: () => LocalizedString;
    /**
     * Generating keys...
     */
    generatingKeys: () => LocalizedString;
    /**
		 * Scan this QR code from another device to add this phone to an 
	      existing Daimo account.
		 */
    scanQR: () => LocalizedString;
    /**
     * Use Backup
     */
    useBackup: () => LocalizedString;
  };
  existingSeedPhrase: {
    /**
     * Log in with seed phrase
     */
    screenHeader: () => LocalizedString;
  };
  existingUseBackup: {
    /**
     * Choose a recovery option
     */
    screenHeader: () => LocalizedString;
    /**
		 * Log in with a backup key.
	This adds your device to the account.
		 */
    description: () => LocalizedString;
    /**
     * LOG IN WITH SEED PHRASE
     */
    logInWithSeedPhrase: () => LocalizedString;
  };
  logIn: {
    /**
     * LOG IN WITH {keyType}
     */
    button: (arg: { keyType: string }) => LocalizedString;
    fromSeed: {
      /**
       * Seed phrase not on account. Removed?
       */
      error: () => LocalizedString;
      /**
       * LOG IN WITH SEED PHRASE
       */
      button: () => LocalizedString;
    };
  };
  missingKey: {
    /**
     * Missing Key
     */
    screenHeader: () => LocalizedString;
    /**
     * LOG OUT
     */
    logOut: () => LocalizedString;
    keyErrorDesc: {
      noKey: {
        /**
         * New phone?
         */
        title: () => LocalizedString;
        /**
				 * We found your account, but no device key. Keys in secure hardware 
			        never leave your device, so they don't transfer when you get a new phone.
			        Log out, then log in using a backup key.
				 */
        desc: () => LocalizedString;
      };
      removedKey: {
        /**
         * Device removed
         */
        title: () => LocalizedString;
        /**
				 * It looks like the key on this device was removed from your 
			        account. Log out, then log in using a backup key.
				 */
        desc: () => LocalizedString;
      };
      unhandledKeyError: {
        /**
         * Unhandled key error
         */
        title: () => LocalizedString;
        desc: () => LocalizedString;
      };
    };
  };
  onboardingChooseName: {
    /**
     * Choose Username
     */
    screenHeader: () => LocalizedString;
    /**
     * Choose a username you'll go by on Daimo. Your username is public.
     */
    instructions: () => LocalizedString;
    picker: {
      /**
       * choose a username
       */
      title: () => LocalizedString;
      /**
       * CREATE ACCOUNT
       */
      createButton: () => LocalizedString;
      /**
       * GENERATE RANDOM
       */
      generateRandom: () => LocalizedString;
      /**
       * offline?
       */
      error: () => LocalizedString;
      /**
       * sorry, that name is taken
       */
      taken: () => LocalizedString;
      /**
       * available
       */
      available: () => LocalizedString;
    };
  };
  onboardingEnterInvite: {
    /**
     * Enter Invite Code
     */
    screenHeader: () => LocalizedString;
    /**
     * JOIN WAITLIST
     */
    waitlistButton: () => LocalizedString;
    /**
		 * Type your invite code below or paste a link.
	Join the 
	      waitlist if you don't have a code.
		 */
    instructions: () => LocalizedString;
    inviteCode: {
      /**
       * enter invite code
       */
      title: () => LocalizedString;
      /**
       * Submit
       */
      button: () => LocalizedString;
    };
  };
  onboardingIntro: {
    /**
     * Welcome to Daimo
     */
    title: () => LocalizedString;
    /**
     * Pay or receive USDC anywhere
     */
    subtitle: () => LocalizedString;
    /**
     * ACCEPT INVITE
     */
    acceptInviteButton: () => LocalizedString;
    /**
     * ALREADY HAVE AN ACCOUNT?
     */
    alreadyHaveAccountButton: () => LocalizedString;
    rows: {
      selfCustody: {
        /**
         * Your keys, your coins
         */
        title: () => LocalizedString;
        /**
         * USDC on Base.
         */
        description: () => LocalizedString;
      };
      help: {
        /**
         * Learn more
         */
        button: () => LocalizedString;
        /**
         * How does USDC work?
         */
        description: () => LocalizedString;
      };
      everywhere: {
        /**
         * Works everywhere
         */
        title: () => LocalizedString;
        /**
         * Instant, 24/7 transfers to any contact
         */
        description: () => LocalizedString;
      };
      onEthereum: {
        /**
         * Runs on Ethereum
         */
        title: () => LocalizedString;
        /**
         * Daimo runs on Base, a rollup
         */
        description: () => LocalizedString;
      };
    };
    helpModalUSDC: {
      /**
			 * USDC is a regulated, digital currency that can always be redeemed 
		        1:1 for US dollars.
			 */
      description: () => LocalizedString;
      /**
       * Learn more about USDC
       */
      learnMore: () => LocalizedString;
      /**
       * here
       */
      here: () => LocalizedString;
    };
  };
  onboardingSetupKey: {
    /**
     * Set up device
     */
    screenHeader: () => LocalizedString;
    pin: {
      /**
			 * Generate your Daimo device key. This key is generated 
		      and stored on your device, and secures access to your Daimo account.
			 */
      generateDescription: () => LocalizedString;
      /**
			 * Authentication failed. Does your phone have a secure 
		      lock screen set up? You'll need one to secure your Daimo account.
			 */
      failedDescription: () => LocalizedString;
      /**
       * Try again
       */
      tryAgainButton: () => LocalizedString;
      /**
       * Generate
       */
      generateButton: () => LocalizedString;
    };
  };
  receiveNav: {
    /**
     * Request
     */
    screenHeader: () => LocalizedString;
  };
  receive: {
    /**
     * Request from
     */
    screenHeader: () => LocalizedString;
    sendRequest: {
      /**
       * Requesting...
       */
      loading: () => LocalizedString;
      /**
       * Send a request link
       */
      title: () => LocalizedString;
      /**
       * Request USDC from someone using any messaging app
       */
      subtitle: () => LocalizedString;
    };
  };
  fulfillRequest: {
    disabledReason: {
      /**
       * Request already fulfilled
       */
      fulfilled: () => LocalizedString;
      /**
       * Request cancelled
       */
      cancelled: () => LocalizedString;
      /**
       * Can't send to yourself
       */
      self: () => LocalizedString;
      /**
       * Insufficient funds
       */
      insufficientFunds: () => LocalizedString;
    };
    /**
     * HOLD TO FULFILL
     */
    holdButton: () => LocalizedString;
    statusMsg: {
      /**
       * Payments are public
       */
      paymentsPublic: () => LocalizedString;
      /**
       * Total incl. fees {dollars}
       */
      totalDollars: (arg: { dollars: string }) => LocalizedString;
    };
  };
  memoDisplay: {
    /**
     * memo {status}
     */
    status: (arg: { status: string }) => LocalizedString;
    /**
     * WHAT'S THIS FOR?
     */
    placeholder: () => LocalizedString;
  };
  noteAction: {
    disabledReason: {
      /**
       * Insufficient funds
       */
      insufficientFunds: () => LocalizedString;
    };
    statusMsg: {
      /**
       * Total incl. fees {dollars}
       */
      totalDollars: (arg: { dollars: string }) => LocalizedString;
    };
    externalAction: {
      /**
       * SEND SMS
       */
      sms: () => LocalizedString;
      /**
       * SEND MAIL
       */
      email: () => LocalizedString;
      /**
       * SEND PAYMENT LINK
       */
      paymentLink: () => LocalizedString;
    };
    /**
     * HOLD TO CONFIRM
     */
    holdButton: () => LocalizedString;
  };
  routeDisplay: {
    /**
     * They will receive {amount} {tokenSymbol}
     */
    theyWillReceive: (arg: {
      amount: string;
      tokenSymbol: string;
    }) => LocalizedString;
  };
  sendNav: {
    /**
     * Send
     */
    screenHeader: () => LocalizedString;
  };
  sendNote: {
    /**
     * Send Link
     */
    screenHeader: () => LocalizedString;
    /**
     * Send {tokenSymbol} via link
     */
    info: (arg: { tokenSymbol: string }) => LocalizedString;
    help: {
      /**
       * How Payment Links Work
       */
      title: () => LocalizedString;
      /**
       * Learn how
       */
      learn: () => LocalizedString;
      /**
       * Anyone with the link can claim
       */
      subtitle: () => LocalizedString;
      description: {
        /**
         * Payment links carry money in a link, so that you can send it to anyone.
         */
        firstPara: () => LocalizedString;
        /**
         * You can cancel an unclaimed link to get your money back.
         */
        secondPara: () => LocalizedString;
        /**
         * They're self-custody. The key is part of the URL.
         */
        thirdPara: () => LocalizedString;
        /**
				 * Each link doubles as a Daimo invite. Plus, anyone with the 
			          link can claim with any wallet, like Rainbow or Metamask.
				 */
        fourthPara: () => LocalizedString;
      };
    };
    /**
     * Enter amount
     */
    enterAmount: () => LocalizedString;
    /**
     * Create Payment Link
     */
    createLinkButton: () => LocalizedString;
  };
  sendTransferButton: {
    disabledReason: {
      /**
       * Insufficient funds
       */
      insufficientFunds: () => LocalizedString;
      /**
       * Can't send to yourself
       */
      self: () => LocalizedString;
      /**
       * Can't send to this account
       */
      other: () => LocalizedString;
      /**
       * Enter an amount
       */
      zero: () => LocalizedString;
      /**
       * Minimum transfer amount is {minTransferAmount} USDC
       */
      min: (arg: { minTransferAmount: number }) => LocalizedString;
    };
    /**
     * HOLD TO SEND
     */
    holdButton: () => LocalizedString;
    statusMsg: {
      /**
       * You need at least {totalStr} to send
       */
      insufficientFundsPlusFee: (arg: { totalStr: string }) => LocalizedString;
      /**
       * Insufficient funds
       */
      insufficientFunds: () => LocalizedString;
      /**
       * Total with fees {totalStr}
       */
      totalDollars: (arg: { totalStr: string }) => LocalizedString;
      /**
       * Payments are public
       */
      paymentsPublic: () => LocalizedString;
    };
  };
  sendTransferScreen: {
    /**
     * Send to
     */
    screenHeader: () => LocalizedString;
    /**
     * First time paying {name}
     */
    firstTime: (arg: { name: string }) => LocalizedString;
  };
  deposit: {
    /**
     * Deposit or Withdraw
     */
    screenHeader: () => LocalizedString;
    landline: {
      /**
       * Connect with Landline
       */
      cta: () => LocalizedString;
      /**
       * Deposit or withdraw directly from a US bank account
       */
      title: () => LocalizedString;
      /**
       * Connected {timeAgo} ago
       */
      optionRowTitle: (arg: { timeAgo: string }) => LocalizedString;
    };
    binance: {
      /**
       * Deposit from Binance
       */
      cta: () => LocalizedString;
      /**
       * Send from Binance balance
       */
      title: () => LocalizedString;
    };
    default: {
      /**
       * Deposit to address
       */
      cta: () => LocalizedString;
      /**
       * Send to your address
       */
      title: () => LocalizedString;
    };
    /**
     * loading...
     */
    loading: () => LocalizedString;
    initiated: {
      /**
       * Deposit initiated
       */
      title: () => LocalizedString;
      /**
       * Complete in browser, then funds should arrive in a few minutes.
       */
      subtitle: () => LocalizedString;
    };
    withdraw: {
      /**
       * Withdraw
       */
      cta: () => LocalizedString;
      /**
       * Withdraw to any wallet or exchange
       */
      title: () => LocalizedString;
    };
  };
  error: {
    /**
     * An error occurred
     */
    banner: () => LocalizedString;
  };
  home: {
    /**
     * + ${pendingDollars} PENDING
     */
    pending: (arg: { pendingDollars: string }) => LocalizedString;
    /**
     * Finish setting up your account
     */
    finishAccountSetUp: () => LocalizedString;
  };
  invite: {
    /**
     * Invite Friends
     */
    screenHeader: () => LocalizedString;
    /**
     * +{moreInvitees} more
     */
    more: (arg: { moreInvitees: number }) => LocalizedString;
    /**
     * You've invited {invited} friend{{s}}
     */
    invited: (arg: { invited: number }) => LocalizedString;
    /**
     * {usesLeft} invite{{s}} left
     */
    left: (arg: { usesLeft: number }) => LocalizedString;
    locked: {
      /**
       * Invite your friends and earn USDC!
       */
      header: () => LocalizedString;
      /**
       * Use Daimo more to unlock invites. Send a payment link to onboard your contacts.
       */
      description: () => LocalizedString;
    };
    /**
     * SEND
     */
    sendButton: () => LocalizedString;
    referral: {
      /**
       * You'll get credit for the invite on their profile {bonusSubtitle}
       */
      creditForInvite: (arg: { bonusSubtitle: string }) => LocalizedString;
      /**
       * and we'll send you both ${bonusDollarsInvitee} USDC
       */
      bonusBoth: (arg: { bonusDollarsInvitee: number }) => LocalizedString;
      /**
       * and we'll send them ${bonusDollarsInvitee} USDC
       */
      bonusInvitee: (arg: { bonusDollarsInvitee: number }) => LocalizedString;
      /**
       * and we'll send you ${bonusDollarsInviter} USDC
       */
      bonusInviter: (arg: { bonusDollarsInviter: number }) => LocalizedString;
      /**
       * Invite Code
       */
      inviteCode: () => LocalizedString;
      /**
       * Invite Link
       */
      inviteLink: () => LocalizedString;
      share: {
        /**
         * Share Link
         */
        button: () => LocalizedString;
        /**
         * SHARE FRAME ON FARCASTER
         */
        farcasterButton: () => LocalizedString;
        /**
         * Join+me+on+Daimo
         */
        farcasterMsg: () => LocalizedString;
      };
    };
  };
  landlineBankTransfer: {
    warning: {
      /**
       * Withdrawals are public
       */
      title: () => LocalizedString;
      /**
       * Minimum withdrawal of 1 USDC
       */
      minimum: () => LocalizedString;
    };
  };
  profile: {
    /**
     * Profile
     */
    screenHeader: () => LocalizedString;
    error: {
      account: {
        /**
         * Account not found
         */
        title: () => LocalizedString;
        /**
         * Couldn't load account {account}
         */
        msg: (arg: { account: string }) => LocalizedString;
      };
      invite: {
        /**
         * Invite not found
         */
        title: () => LocalizedString;
        /**
         * Couldn't load invite {code}
         */
        msg: (arg: { code: string }) => LocalizedString;
      };
    };
    subtitle: {
      /**
       * Invited by
       */
      invitedBy: () => LocalizedString;
      /**
       * Joined {timeAgo}
       */
      joined: (arg: { timeAgo: string }) => LocalizedString;
    };
  };
  qr: {
    title: {
      /**
       * Display QR Code
       */
      display: () => LocalizedString;
      /**
       * Scan QR Code
       */
      scan: () => LocalizedString;
    };
    /**
     * Copied address
     */
    copiedAddress: () => LocalizedString;
    /**
     * DEPOSIT FROM EXCHANGE ›
     */
    depositButton: () => LocalizedString;
  };
  seedPhrase: {
    title: {
      /**
       * Copy seed phrase
       */
      copy: () => LocalizedString;
      /**
       * Verify seed phrase
       */
      verify: () => LocalizedString;
    };
    /**
		 * This seed phrase will be added to your account, allowing you 
	    to recover it even if you lose your device.
		 */
    description: () => LocalizedString;
    button: {
      /**
       * Continue
       */
      continue: () => LocalizedString;
      /**
       * Finish Setup
       */
      finish: () => LocalizedString;
    };
    copy: {
      /**
       * I've saved this seed phrase securely
       */
      confirm: () => LocalizedString;
      /**
       * COPY TO CLIPBOARD
       */
      clipboard: () => LocalizedString;
    };
    verify: {
      /**
       * Type your seed phrase into the input box.
       */
      description: () => LocalizedString;
    };
  };
  settings: {
    /**
     * Settings
     */
    screenHeader: () => LocalizedString;
    /**
     * Show details
     */
    showDetails: () => LocalizedString;
    /**
     * Hide details
     */
    hideDetails: () => LocalizedString;
    account: {
      /**
       * CONNECT FARCASTER
       */
      connectFarcaster: () => LocalizedString;
      /**
       * VIEW ACCOUNT ON EXPLORER
       */
      viewAccountOnExplorer: () => LocalizedString;
      /**
       * NO SOCIALS CONNECTED
       */
      noSocialsConnected: () => LocalizedString;
    };
    devices: {
      /**
       * My devices & backups
       */
      title: () => LocalizedString;
      /**
       * THIS DEVICE
       */
      thisDevice: () => LocalizedString;
      passkeys: {
        /**
         * What is a Passkey Backup?
         */
        title: () => LocalizedString;
        description: {
          /**
					 * Passkeys are a convenient and phishing-resistant 
				          alternative to seed phrases
					 */
          firstPara: () => LocalizedString;
          /**
					 * Passkeys are generated and stored in your password 
				          manager, and allow you to recover your account even if you lose your device.
					 */
          secondPara: () => LocalizedString;
        };
      };
      createBackup: {
        /**
         * Create a Backup
         */
        title: () => LocalizedString;
        /**
         * Passkey, security key, or seed phrase
         */
        msg: () => LocalizedString;
        /**
         * CREATE BACKUP
         */
        button: () => LocalizedString;
      };
      addDevice: {
        /**
         * Add a Device
         */
        title: () => LocalizedString;
        /**
         * Use your account on another device
         */
        msg: () => LocalizedString;
        /**
         * ADD DEVICE
         */
        button: () => LocalizedString;
      };
      contactSupport: {
        /**
         * Questions? Feedback?
         */
        title: () => LocalizedString;
        /**
         * Contact us on Telegram
         */
        msg: () => LocalizedString;
        /**
         * CONTACT SUPPORT
         */
        button: () => LocalizedString;
      };
    };
    /**
     * Log out
     */
    logOut: () => LocalizedString;
    /**
     * Remove
     */
    remove: () => LocalizedString;
    /**
     * Pending
     */
    pending: () => LocalizedString;
    /**
     * Added {timeAgo}
     */
    addedAgo: (arg: { timeAgo: string }) => LocalizedString;
    details: {
      /**
       * Device details
       */
      title: () => LocalizedString;
      /**
       * Enable notifications
       */
      enableNotifications: () => LocalizedString;
      /**
       * Send debug log
       */
      sendDebugLog: () => LocalizedString;
    };
  };
  yourInvites: {
    /**
     * Your Invites
     */
    screenHeader: () => LocalizedString;
    /**
     * Joined {timeAgo} ago
     */
    joinedAgo: (arg: { timeAgo: string }) => LocalizedString;
  };
  amountInput: {
    /**
     * {dollars} available
     */
    dollarsAvailable: (arg: { dollars: string }) => LocalizedString;
  };
  offlineHeader: {
    /**
     * Offline
     */
    header: () => LocalizedString;
    /**
     * Retrying...
     */
    retrying: () => LocalizedString;
  };
  scanner: {
    /**
     * Enable camera access
     */
    enableCamera: () => LocalizedString;
  };
  searchHeader: {
    /**
     * Search for user...
     */
    searchUser: () => LocalizedString;
  };
  searchResults: {
    /**
     * No results
     */
    noResults: () => LocalizedString;
    /**
     * SEND PAYMENT LINK INSTEAD
     */
    paymentLinkButton: () => LocalizedString;
    /**
     * Sent {timeAgo}
     */
    sentAgo: (arg: { timeAgo: string }) => LocalizedString;
    /**
     * Received {timeAgo}
     */
    receivedAgo: (arg: { timeAgo: string }) => LocalizedString;
    extra: {
      /**
       * Send to contact
       */
      contact: () => LocalizedString;
      /**
       * Request via link
       */
      requestLink: () => LocalizedString;
      /**
       * Send via link
       */
      sendLink: () => LocalizedString;
      /**
       * Show QR code
       */
      showQR: () => LocalizedString;
      /**
       * Scan QR code
       */
      scanQR: () => LocalizedString;
    };
  };
  searchScreen: {
    /**
     * Search user, ENS, contact, or email...
     */
    placeholderWithContact: () => LocalizedString;
    /**
     * Search user, ENS, email, or phone...
     */
    placeholderWithoutContact: () => LocalizedString;
  };
  createBackup: {
    default: {
      /**
       * Create a backup
       */
      header: () => LocalizedString;
      /**
       * Set up a passkey backup
       */
      passkeyTitle: () => LocalizedString;
      /**
       * Convenient, secure, and resistant to phishing
       */
      passkeyBullet1: () => LocalizedString;
      /**
       * Stored by your password manager, like iCloud Keychain or 1Password
       */
      passkeyBullet2: () => LocalizedString;
      /**
       * Back up offline instead
       */
      offlineInsteadButton: () => LocalizedString;
    };
    offline: {
      /**
       * Create an offline backup
       */
      header: () => LocalizedString;
      /**
       * Set up a security key backup
       */
      securityKeyTitle: () => LocalizedString;
      /**
       * Use a physical FIDO key, such as a YubiKey
       */
      securityKeyBullet1: () => LocalizedString;
      /**
       * Set up a seed phrase
       */
      seedPhraseTitle: () => LocalizedString;
      /**
       * Your funds are connected to a phrase you can store securely
       */
      seedPhraseBullet1: () => LocalizedString;
      /**
       * Backup with seed phrase
       */
      seedPhraseButton: () => LocalizedString;
    };
    addKey: {
      /**
       * PASSKEY
       */
      passkey: () => LocalizedString;
      /**
       * SECURITY KEY
       */
      securityKey: () => LocalizedString;
      /**
       * BACK UP WITH {slotType}
       */
      button: (arg: { slotType: string }) => LocalizedString;
    };
    recommended: {
      /**
       * REC.
       */
      compact: () => LocalizedString;
      /**
       * RECOMMENDED
       */
      default: () => LocalizedString;
    };
  };
  debugBottom: {
    /**
     * Did something go wrong?
     */
    sheetHeader: () => LocalizedString;
    /**
		 * Contact us on Telegram, then tap Send Debug Log to send us more 
	      information. We'll get to the bottom of it.
		 */
    description: () => LocalizedString;
    /**
     * CONTACT SUPPORT
     */
    helpButton: () => LocalizedString;
  };
  depositAddressBottom: {
    /**
     * Deposit
     */
    sheetHeader: () => LocalizedString;
    /**
		 * Send {tokenSymbol} to your address below. Any other ERC-20 tokens 
	      will be converted to USDC. Confirm that you're sending:
		 */
    description: (arg: { tokenSymbol: string }) => LocalizedString;
    checkChain: {
      /**
       * On
       */
      on: () => LocalizedString;
      /**
       * , not any other chain
       */
      notOther: () => LocalizedString;
    };
    /**
     * Copied
     */
    copied: () => LocalizedString;
  };
  farcasterBottom: {
    /**
     * Your account is verified
     */
    verified: () => LocalizedString;
    /**
     * Your account is linked
     */
    linked: () => LocalizedString;
    /**
     * Connect Farcaster
     */
    connect: () => LocalizedString;
    /**
     * OPEN IN WARPCAST
     */
    openWarpcastButton: () => LocalizedString;
    /**
     * Welcome, {fcUsername}
     */
    welcome: (arg: { fcUsername: string }) => LocalizedString;
    /**
     * Loading...
     */
    loading: () => LocalizedString;
  };
  helpBottom: {
    /**
     * GOT IT
     */
    gotItButton: () => LocalizedString;
  };
  onboardingChecklistBottom: {
    /**
     * Onboarding checklist
     */
    sheetHeader: () => LocalizedString;
    /**
     * Complete these items to finish account setup
     */
    description: () => LocalizedString;
    secureAccount: {
      /**
       * Secure your account
       */
      title: () => LocalizedString;
      /**
       * Add a backup to your account
       */
      description: () => LocalizedString;
    };
    connectFarcaster: {
      /**
       * Connect Farcaster
       */
      title: () => LocalizedString;
      /**
       * Import profile picture and connections
       */
      description: () => LocalizedString;
    };
    /**
     * DISMISS
     */
    dismissButton: () => LocalizedString;
  };
  ownRequestBottom: {
    /**
     * You requested
     */
    sheetHeader: () => LocalizedString;
    /**
     * CANCEL REQUEST
     */
    cancelButton: () => LocalizedString;
  };
  swapBottom: {
    /**
     * Accept
     */
    sheetHeader: () => LocalizedString;
  };
  withdrawInstructionsBottom: {
    /**
     * Withdraw
     */
    sheetHeader: () => LocalizedString;
    wallet: {
      /**
       * Withdraw to another wallet
       */
      title: () => LocalizedString;
      /**
			 * Tap Send, then paste in your wallet address. Remember that 
		        you're sending USDC on Base.
			 */
      description: () => LocalizedString;
    };
    coinbase: {
      /**
       * Withdraw to Coinbase
       */
      title: () => LocalizedString;
      /**
       * Go to Coinbase, then tap
       */
      description: () => LocalizedString;
      steps: {
        /**
         * Send & Receive
         */
        sendReceive: () => LocalizedString;
        /**
         * Receive
         */
        receive: () => LocalizedString;
        /**
         * . Choose
         */
        choose: () => LocalizedString;
        /**
         * Set Network to
         */
        setNetwork: () => LocalizedString;
      };
      /**
			 * Use Daimo to send to the address shown. Funds should appear 
		        on Coinbase in a few minutes.
			 */
      sendToAddress: () => LocalizedString;
    };
  };
  addrLabel: {
    /**
     * team Daimo
     */
    faucet: () => LocalizedString;
    /**
     * payment link
     */
    paymentLink: () => LocalizedString;
    /**
     * request link
     */
    requestLink: () => LocalizedString;
    /**
     * fee
     */
    paymaster: () => LocalizedString;
    /**
     * swapped ETH
     */
    uniswapETHPool: () => LocalizedString;
  };
  tabNav: {
    /**
     * Deposit
     */
    deposit: () => LocalizedString;
    /**
     * Invite
     */
    invite: () => LocalizedString;
    /**
     * Home
     */
    home: () => LocalizedString;
    /**
     * Send
     */
    send: () => LocalizedString;
    /**
     * Settings
     */
    settings: () => LocalizedString;
  };
};

export type Formatters = {};
